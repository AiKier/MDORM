<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MDORM.DapperExt</name>
    </assembly>
    <members>
        <member name="T:MDORM.DapperExt.BaseEntity">
            <summary>
            Entity基类
            </summary>
        </member>
        <member name="T:MDORM.Dapper.CommandFlags">
            <summary>
            Additional state flags that control command behaviour
            </summary>
        </member>
        <member name="F:MDORM.Dapper.CommandFlags.None">
            <summary>
            No additional flags
            </summary>
        </member>
        <member name="F:MDORM.Dapper.CommandFlags.Buffered">
            <summary>
            Should data be buffered before returning?
            </summary>
        </member>
        <member name="F:MDORM.Dapper.CommandFlags.Pipelined">
            <summary>
            Can async queries be pipelined?
            </summary>
        </member>
        <member name="F:MDORM.Dapper.CommandFlags.NoCache">
            <summary>
            Should the plan cache be bypassed?
            </summary>
        </member>
        <member name="T:MDORM.Dapper.CommandDefinition">
            <summary>
            Represents the key aspects of a sql operation
            </summary>
        </member>
        <member name="M:MDORM.Dapper.CommandDefinition.#ctor(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},MDORM.Dapper.CommandFlags)">
            <summary>
            Initialize the command definition
            </summary>
        </member>
        <member name="P:MDORM.Dapper.CommandDefinition.CommandText">
            <summary>
            The command (sql or a stored-procedure name) to execute
            </summary>
        </member>
        <member name="P:MDORM.Dapper.CommandDefinition.Parameters">
            <summary>
            The parameters associated with the command
            </summary>
        </member>
        <member name="P:MDORM.Dapper.CommandDefinition.Transaction">
            <summary>
            The active transaction for the command
            </summary>
        </member>
        <member name="P:MDORM.Dapper.CommandDefinition.CommandTimeout">
            <summary>
            The effective timeout for the command
            </summary>
        </member>
        <member name="P:MDORM.Dapper.CommandDefinition.CommandType">
            <summary>
            The type of command that the command-text represents
            </summary>
        </member>
        <member name="P:MDORM.Dapper.CommandDefinition.Buffered">
            <summary>
            Should data be buffered before returning?
            </summary>
        </member>
        <member name="P:MDORM.Dapper.CommandDefinition.AddToCache">
            <summary>
            Should the plan for this query be cached?
            </summary>
        </member>
        <member name="P:MDORM.Dapper.CommandDefinition.Flags">
            <summary>
            Additional state flags against this command
            </summary>
        </member>
        <member name="P:MDORM.Dapper.CommandDefinition.Pipelined">
            <summary>
            Can async queries be pipelined?
            </summary>
        </member>
        <member name="T:MDORM.Dapper.SqlMapper">
            <summary>
            Dapper, a light weight object mapper for ADO.NET
            </summary>
        </member>
        <member name="F:MDORM.Dapper.SqlMapper.DataTableTypeNameKey">
            <summary>
            Key used to indicate the type name associated with a DataTable
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.PurgeQueryCache">
            <summary>
            Purge the query cache 
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.GetCachedSQLCount">
            <summary>
            Return a count of all the cached queries by dapper
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.GetCachedSQL(System.Int32)">
            <summary>
            Return a list of all the queries cached by dapper
            </summary>
            <param name="ignoreHitCountAbove"></param>
            <returns></returns>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.GetHashCollissions">
            <summary>
            Deep diagnostics only: find any hash collisions in the cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.ResetTypeHandlers">
            <summary>
            Clear the registered type handlers
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.AddTypeMap(System.Type,System.Data.DbType)">
            <summary>
            Configure the specified type to be mapped to a given db-type
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.AddTypeHandler(System.Type,MDORM.Dapper.SqlMapper.ITypeHandler)">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.AddTypeHandlerImpl(System.Type,MDORM.Dapper.SqlMapper.ITypeHandler,System.Boolean)">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.AddTypeHandler``1(MDORM.Dapper.SqlMapper.TypeHandler{``0})">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.GetDbType(System.Object)">
            <summary>
            Get the DbType that maps to a given value
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Obtains the data as a list; if it is *already* a list, the original object is returned without
            any duplication; otherwise, ToList() is invoked.
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.Execute(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL  
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.Execute(System.Data.IDbConnection,MDORM.Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL  
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.ExecuteScalar(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.ExecuteScalar``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.ExecuteScalar(System.Data.IDbConnection,MDORM.Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.ExecuteScalar``1(System.Data.IDbConnection,MDORM.Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.ExecuteReader(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:System.Data.DataSet"/>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            DataTable table = new DataTable("MyTable");
            using (var reader = ExecuteReader(cnn, sql, param))
            {
                table.Load(reader);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.ExecuteReader(System.Data.IDbConnection,MDORM.Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:System.Data.DataSet"/>.
            </remarks>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.ExecuteReader(System.Data.IDbConnection,MDORM.Dapper.CommandDefinition,System.Data.CommandBehavior)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:System.Data.DataSet"/>.
            </remarks>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.Query(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a list of dynamic objects, reader is closed after the call
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.Query(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.Query``1(System.Data.IDbConnection,MDORM.Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.QueryMultiple(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.QueryMultiple(System.Data.IDbConnection,MDORM.Dapper.CommandDefinition)">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.Query``3(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst">The first type in the record set</typeparam>
            <typeparam name="TSecond">The second type in the record set</typeparam>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.Query``4(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.Query``5(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 4 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.Query``6(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 5 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.Query``7(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 6 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TSixth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.Query``8(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 7 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TSixth"></typeparam>
            <typeparam name="TSeventh"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Type[],System.Func{System.Object[],``0},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with arbitrary input parameters
            </summary>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="types">array of types in the record set</param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.ReadChar(System.Object)">
            <summary>
            Internal use only
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.ReadNullableChar(System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.FindOrAddParameter(System.Data.IDataParameterCollection,System.Data.IDbCommand,System.String)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.PackListParameters(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.ReplaceLiterals(MDORM.Dapper.SqlMapper.IParameterLookup,System.Data.IDbCommand)">
            <summary>
            Replace all literal tokens with their text form
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.Format(System.Object)">
            <summary>
            Convert numeric values to their string form for SQL literal purposes
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.CreateParamInfoGenerator(MDORM.Dapper.SqlMapper.Identity,System.Boolean,System.Boolean)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.GetTypeMap(System.Type)">
            <summary>
            Gets type-map for the given type
            </summary>
            <returns>Type map implementation, DefaultTypeMap instance if no override present</returns>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.SetTypeMap(System.Type,MDORM.Dapper.SqlMapper.ITypeMap)">
            <summary>
            Set custom mapping for type deserializers
            </summary>
            <param name="type">Entity type to override</param>
            <param name="map">Mapping rules impementation, null to remove custom map</param>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.GetTypeDeserializer(System.Type,System.Data.IDataReader,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Internal use only
            </summary>
            <param name="type"></param>
            <param name="reader"></param>
            <param name="startBound"></param>
            <param name="length"></param>
            <param name="returnNullIfFirstMissing"></param>
            <returns></returns>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.ThrowDataException(System.Exception,System.Int32,System.Data.IDataReader,System.Object)">
            <summary>
            Throws a data exception, only used internally
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.AsTableValuedParameter(System.Data.DataTable,System.String)">
            <summary>
            Used to pass a DataTable as a TableValuedParameter
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.SetTypeName(System.Data.DataTable,System.String)">
            <summary>
            Associate a DataTable with a type name
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.GetTypeName(System.Data.DataTable)">
            <summary>
            Fetch the type name associated with a DataTable
            </summary>
        </member>
        <member name="E:MDORM.Dapper.SqlMapper.QueryCachePurged">
            <summary>
            Called if the query cache is purged via PurgeQueryCache
            </summary>
        </member>
        <member name="P:MDORM.Dapper.SqlMapper.ConnectionStringComparer">
            <summary>
            How should connection strings be compared for equivalence? Defaults to StringComparer.Ordinal.
            Providing a custom implementation can be useful for allowing multi-tenancy databases with identical
            schema to share strategies. Note that usual equivalence rules apply: any equivalent connection strings
            <b>MUST</b> yield the same hash-code.
            </summary>
        </member>
        <member name="T:MDORM.Dapper.SqlMapper.IDynamicParameters">
            <summary>
            Implement this interface to pass an arbitrary db specific set of parameters to Dapper
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.IDynamicParameters.AddParameters(System.Data.IDbCommand,MDORM.Dapper.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="T:MDORM.Dapper.SqlMapper.IParameterLookup">
            <summary>
            Extends IDynamicParameters providing by-name lookup of parameter values
            </summary>
        </member>
        <member name="P:MDORM.Dapper.SqlMapper.IParameterLookup.Item(System.String)">
            <summary>
            Get the value of the specified parameter (return null if not found)
            </summary>
        </member>
        <member name="T:MDORM.Dapper.SqlMapper.IParameterCallbacks">
            <summary>
            Extends IDynamicParameters with facilities for executing callbacks after commands have completed
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.IParameterCallbacks.OnCompleted">
            <summary>
            Invoked when the command has executed
            </summary>
        </member>
        <member name="T:MDORM.Dapper.SqlMapper.ICustomQueryParameter">
            <summary>
            Implement this interface to pass an arbitrary db specific parameter to Dapper
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.ICustomQueryParameter.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter needed to the command before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="name">Parameter name</param>
        </member>
        <member name="T:MDORM.Dapper.SqlMapper.ITypeHandler">
            <summary>
            Implement this interface to perform custom type-based parameter handling and value parsing
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.ITypeHandler.SetValue(System.Data.IDbDataParameter,System.Object)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.ITypeHandler.Parse(System.Type,System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <param name="destinationType">The type to parse to</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:MDORM.Dapper.SqlMapper.UdtTypeHandler">
            <summary>
            A type handler for data-types that are supported by the underlying provider, but which need
            a well-known UdtTypeName to be specified
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.UdtTypeHandler.#ctor(System.String)">
            <summary>
            Creates a new instance of UdtTypeHandler with the specified UdtTypeName
            </summary>
        </member>
        <member name="T:MDORM.Dapper.SqlMapper.TypeHandler`1">
            <summary>
            Base-class for simple type-handlers
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.TypeHandler`1.SetValue(System.Data.IDbDataParameter,`0)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.TypeHandler`1.Parse(System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:MDORM.Dapper.SqlMapper.ITypeMap">
            <summary>
            Implement this interface to change default mapping of reader columns to type members
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.ITypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.ITypeMap.FindExplicitConstructor">
            <summary>
            Returns a constructor which should *always* be used.
            
            Parameters will be default values, nulls for reference types and zero'd for value types.
            
            Use this class to force object creation away from parameterless constructors you don't control.
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.ITypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.ITypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="T:MDORM.Dapper.SqlMapper.IMemberMap">
            <summary>
            Implements this interface to provide custom member mapping
            </summary>
        </member>
        <member name="P:MDORM.Dapper.SqlMapper.IMemberMap.ColumnName">
            <summary>
            Source DataReader column name
            </summary>
        </member>
        <member name="P:MDORM.Dapper.SqlMapper.IMemberMap.MemberType">
            <summary>
             Target member type
            </summary>
        </member>
        <member name="P:MDORM.Dapper.SqlMapper.IMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:MDORM.Dapper.SqlMapper.IMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:MDORM.Dapper.SqlMapper.IMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="T:MDORM.Dapper.SqlMapper.Link`2">
            <summary>
            This is a micro-cache; suitable when the number of terms is controllable (a few hundred, for example),
            and strictly append-only; you cannot change existing values. All key matches are on **REFERENCE**
            equality. The type is fully thread-safe.
            </summary>
        </member>
        <member name="T:MDORM.Dapper.SqlMapper.TypeHandlerCache`1">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.TypeHandlerCache`1.Parse(System.Object)">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.TypeHandlerCache`1.SetValue(System.Data.IDbDataParameter,System.Object)">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="T:MDORM.Dapper.SqlMapper.Identity">
            <summary>
            Identity of a cached query in Dapper, used for extensibility
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.Identity.ForDynamicParameters(System.Type)">
            <summary>
            Create an identity for use with DynamicParameters, internal use only
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.Identity.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:MDORM.Dapper.SqlMapper.Identity.sql">
            <summary>
            The sql
            </summary>
        </member>
        <member name="F:MDORM.Dapper.SqlMapper.Identity.commandType">
            <summary>
            The command type 
            </summary>
        </member>
        <member name="F:MDORM.Dapper.SqlMapper.Identity.hashCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:MDORM.Dapper.SqlMapper.Identity.gridIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:MDORM.Dapper.SqlMapper.Identity.type">
            <summary>
            
            </summary>
        </member>
        <member name="F:MDORM.Dapper.SqlMapper.Identity.connectionString">
            <summary>
            
            </summary>
        </member>
        <member name="F:MDORM.Dapper.SqlMapper.Identity.parametersType">
            <summary>
            
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.Identity.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.Identity.Equals(MDORM.Dapper.SqlMapper.Identity)">
            <summary>
            Compare 2 Identity objects
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:MDORM.Dapper.SqlMapper.LiteralToken">
            <summary>
            Represents a placeholder for a value that should be replaced as a literal value in the resulting sql
            </summary>
        </member>
        <member name="P:MDORM.Dapper.SqlMapper.LiteralToken.Token">
            <summary>
            The text in the original command that should be replaced
            </summary>
        </member>
        <member name="P:MDORM.Dapper.SqlMapper.LiteralToken.Member">
            <summary>
            The name of the member referred to by the token
            </summary>
        </member>
        <member name="T:MDORM.Dapper.SqlMapper.GridReader">
            <summary>
            The grid reader provides interfaces for reading multiple result sets from a Dapper query 
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.GridReader.Read(System.Boolean)">
            <summary>
            Read the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.GridReader.Read``1(System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.GridReader.Read(System.Type,System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.GridReader.Read``3(System.Func{``0,``1,``2},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.GridReader.Read``4(System.Func{``0,``1,``2,``3},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.GridReader.Read``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.GridReader.Read``6(System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.GridReader.Read``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.GridReader.Read``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SqlMapper.GridReader.Dispose">
            <summary>
            Dispose the grid, closing and disposing both the underlying reader and command.
            </summary>
        </member>
        <member name="P:MDORM.Dapper.SqlMapper.GridReader.IsConsumed">
            <summary>
            Has the underlying reader been consumed?
            </summary>
        </member>
        <member name="T:MDORM.Dapper.DynamicParameters">
            <summary>
            A bag of parameters that can be passed to the Dapper Query and Execute methods
            </summary>
        </member>
        <member name="M:MDORM.Dapper.DynamicParameters.#ctor">
            <summary>
            construct a dynamic parameter bag
            </summary>
        </member>
        <member name="M:MDORM.Dapper.DynamicParameters.#ctor(System.Object)">
            <summary>
            construct a dynamic parameter bag
            </summary>
            <param name="template">can be an anonymous type or a DynamicParameters bag</param>
        </member>
        <member name="M:MDORM.Dapper.DynamicParameters.AddDynamicParams(System.Object)">
            <summary>
            Append a whole object full of params to the dynamic
            EG: AddDynamicParams(new {A = 1, B = 2}) // will add property A and B to the dynamic
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:MDORM.Dapper.DynamicParameters.Add(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32})">
            <summary>
            Add a parameter to this dynamic parameter list
            </summary>
        </member>
        <member name="M:MDORM.Dapper.DynamicParameters.Add(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
            Add a parameter to this dynamic parameter list
            </summary>
        </member>
        <member name="M:MDORM.Dapper.DynamicParameters.AddParameters(System.Data.IDbCommand,MDORM.Dapper.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="M:MDORM.Dapper.DynamicParameters.Get``1(System.String)">
            <summary>
            Get the value of a parameter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns>The value, note DBNull.Value is not returned, instead the value is returned as null</returns>
        </member>
        <member name="M:MDORM.Dapper.DynamicParameters.Output``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Data.DbType},System.Nullable{System.Int32})">
            <summary>
            Allows you to automatically populate a target property/field from output parameters. It actually
            creates an InputOutput parameter, so you can still pass data in. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The object whose property/field you wish to populate.</param>
            <param name="expression">A MemberExpression targeting a property/field of the target (or descendant thereof.)</param>
            <param name="dbType"></param>
            <param name="size">The size to set on the parameter. Defaults to 0, or DbString.DefaultLength in case of strings.</param>
            <returns>The DynamicParameters instance</returns>
        </member>
        <member name="P:MDORM.Dapper.DynamicParameters.RemoveUnused">
            <summary>
            If true, the command-text is inspected and only values that are clearly used are included on the connection
            </summary>
        </member>
        <member name="P:MDORM.Dapper.DynamicParameters.ParameterNames">
            <summary>
            All the names of the param in the bag, use Get to yank them out
            </summary>
        </member>
        <member name="T:MDORM.Dapper.TableValuedParameter">
            <summary>
            Used to pass a DataTable as a TableValuedParameter
            </summary>
        </member>
        <member name="M:MDORM.Dapper.TableValuedParameter.#ctor(System.Data.DataTable)">
            <summary>
            Create a new instance of TableValuedParameter
            </summary>
        </member>
        <member name="M:MDORM.Dapper.TableValuedParameter.#ctor(System.Data.DataTable,System.String)">
            <summary>
            Create a new instance of TableValuedParameter
            </summary>
        </member>
        <member name="T:MDORM.Dapper.DbString">
            <summary>
            This class represents a SQL string, it can be used if you need to denote your parameter is a Char vs VarChar vs nVarChar vs nChar
            </summary>
        </member>
        <member name="F:MDORM.Dapper.DbString.DefaultLength">
            <summary>
            A value to set the default value of strings
            going through Dapper. Default is 4000, any value larger than this
            field will not have the default value applied.
            </summary>
        </member>
        <member name="M:MDORM.Dapper.DbString.#ctor">
            <summary>
            Create a new DbString
            </summary>
        </member>
        <member name="M:MDORM.Dapper.DbString.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter to the command... internal use only
            </summary>
            <param name="command"></param>
            <param name="name"></param>
        </member>
        <member name="P:MDORM.Dapper.DbString.IsAnsi">
            <summary>
            Ansi vs Unicode 
            </summary>
        </member>
        <member name="P:MDORM.Dapper.DbString.IsFixedLength">
            <summary>
            Fixed length 
            </summary>
        </member>
        <member name="P:MDORM.Dapper.DbString.Length">
            <summary>
            Length of the string -1 for max
            </summary>
        </member>
        <member name="P:MDORM.Dapper.DbString.Value">
            <summary>
            The value of the string
            </summary>
        </member>
        <member name="T:MDORM.Dapper.FeatureSupport">
            <summary>
            Handles variances in features per DBMS
            </summary>
        </member>
        <member name="M:MDORM.Dapper.FeatureSupport.Get(System.Data.IDbConnection)">
            <summary>
            Gets the feature set based on the passed connection
            </summary>
        </member>
        <member name="P:MDORM.Dapper.FeatureSupport.Arrays">
            <summary>
            True if the db supports array columns e.g. Postgresql
            </summary>
        </member>
        <member name="T:MDORM.Dapper.SimpleMemberMap">
            <summary>
            Represents simple member map for one of target parameter or property or field to source DataReader column
            </summary>
        </member>
        <member name="M:MDORM.Dapper.SimpleMemberMap.#ctor(System.String,System.Reflection.PropertyInfo)">
            <summary>
            Creates instance for simple property mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="property">Target property</param>
        </member>
        <member name="M:MDORM.Dapper.SimpleMemberMap.#ctor(System.String,System.Reflection.FieldInfo)">
            <summary>
            Creates instance for simple field mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="field">Target property</param>
        </member>
        <member name="M:MDORM.Dapper.SimpleMemberMap.#ctor(System.String,System.Reflection.ParameterInfo)">
            <summary>
            Creates instance for simple constructor parameter mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="parameter">Target constructor parameter</param>
        </member>
        <member name="P:MDORM.Dapper.SimpleMemberMap.ColumnName">
            <summary>
            DataReader column name
            </summary>
        </member>
        <member name="P:MDORM.Dapper.SimpleMemberMap.MemberType">
            <summary>
            Target member type
            </summary>
        </member>
        <member name="P:MDORM.Dapper.SimpleMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:MDORM.Dapper.SimpleMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:MDORM.Dapper.SimpleMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="T:MDORM.Dapper.DefaultTypeMap">
            <summary>
            Represents default type mapping strategy used by Dapper
            </summary>
        </member>
        <member name="M:MDORM.Dapper.DefaultTypeMap.#ctor(System.Type)">
            <summary>
            Creates default type map
            </summary>
            <param name="type">Entity type</param>
        </member>
        <member name="M:MDORM.Dapper.DefaultTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:MDORM.Dapper.DefaultTypeMap.FindExplicitConstructor">
            <summary>
            Returns the constructor, if any, that has the ExplicitConstructorAttribute on it.
            </summary>
        </member>
        <member name="M:MDORM.Dapper.DefaultTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:MDORM.Dapper.DefaultTypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="P:MDORM.Dapper.DefaultTypeMap.MatchNamesWithUnderscores">
            <summary>
            Should column names like User_Id be allowed to match properties/fields like UserId ?
            </summary>
        </member>
        <member name="T:MDORM.Dapper.CustomPropertyTypeMap">
            <summary>
            Implements custom property mapping by user provided criteria (usually presence of some custom attribute with column to member mapping)
            </summary>
        </member>
        <member name="M:MDORM.Dapper.CustomPropertyTypeMap.#ctor(System.Type,System.Func{System.Type,System.String,System.Reflection.PropertyInfo})">
            <summary>
            Creates custom property mapping
            </summary>
            <param name="type">Target entity type</param>
            <param name="propertySelector">Property selector based on target type and DataReader column name</param>
        </member>
        <member name="M:MDORM.Dapper.CustomPropertyTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Always returns default constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Default constructor</returns>
        </member>
        <member name="M:MDORM.Dapper.CustomPropertyTypeMap.FindExplicitConstructor">
            <summary>
            Always returns null
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDORM.Dapper.CustomPropertyTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Not implemented as far as default constructor used for all cases
            </summary>
            <param name="constructor"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:MDORM.Dapper.CustomPropertyTypeMap.GetMember(System.String)">
            <summary>
            Returns property based on selector strategy
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Poperty member map</returns>
        </member>
        <member name="T:MDORM.Dapper.IWrappedDataReader">
            <summary>
            Describes a reader that controls the lifetime of both a command and a reader,
            exposing the downstream command/reader as properties.
            </summary>
        </member>
        <member name="P:MDORM.Dapper.IWrappedDataReader.Reader">
            <summary>
            Obtain the underlying reader
            </summary>
        </member>
        <member name="P:MDORM.Dapper.IWrappedDataReader.Command">
            <summary>
            Obtain the underlying command
            </summary>
        </member>
        <member name="T:MDORM.Dapper.ExplicitConstructorAttribute">
            <summary>
            Tell Dapper to use an explicit constructor, passing nulls or 0s for all parameters
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Lambda2Sql.BinarExpressionProvider(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.ExpressionType,MDORM.Dapper.DynamicParameters)">
            <summary>
            表达式解析器
            </summary>
            <param name="left">左边表达式</param>
            <param name="right">右边表达式</param>
            <param name="type">中间的操作类型</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Lambda2Sql.ExpressionRouter(System.Linq.Expressions.Expression,MDORM.Dapper.DynamicParameters)">
            <summary>
            表达式（递归）解析
            </summary>
            <param name="exp">表达式</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Lambda2Sql.ExpressionTypeCast(System.Linq.Expressions.ExpressionType)">
            <summary>
            表达式操作类型解析
            </summary>
            <param name="type">操作类型</param>
            <returns></returns>
        </member>
        <member name="T:MDORM.DapperExt.DapperExt">
            <summary>
            静态Dapper扩展类
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.DapperExt.SetMappingAssemblies(System.Collections.Generic.IList{System.Reflection.Assembly})">
            <summary>
            添加其他的程序集列表。Dapper扩展将会在这些程序集中查找
            Add other assemblies that Dapper Extensions will search if a mapping is not found in the same assembly of the POCO.
            </summary>
            <param name="assemblies"></param>
        </member>
        <member name="M:MDORM.DapperExt.DapperExt.Configure(MDORM.DapperExt.IDapperExtConfiguration)">
            <summary>
            配置Dapper扩展方法
            Configure DapperExt extension methods.
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.DapperExt.Configure(System.Type,System.Collections.Generic.IList{System.Reflection.Assembly},MDORM.DapperExt.Sql.ISqlDialect)">
            <summary>
            配置Dapper扩展方法
            Configure DapperExt extension methods.
            </summary>
            <param name="defaultMapper">默认的类型</param>
            <param name="mappingAssemblies">要映射的程序集</param>
            <param name="sqlDialect">sql语言实例</param>
        </member>
        <member name="M:MDORM.DapperExt.DapperExt.Get``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            按照特定的Id执行查询并返回T类型的对象
            Executes a query for the specified id, returning the data typed as per T
            </summary>
            <typeparam name="T">返回对象的类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="id">Id</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperExt.Insert``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            为特定的实体对象执行INSERT方法
            Executes an insert query for the specified entity.
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="entities">实体对象</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
        </member>
        <member name="M:MDORM.DapperExt.DapperExt.Insert``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            为特定的实体对象执行插入操作并放回这条记录的主键
            如果实体有单个的的主键，仅仅返回主键值
            如果实体有符合的主键。将会返回一个键值字典
            当实体的主键类型是Guid或者Identity时，主键内容会自动被改变
            Executes an insert query for the specified entity, returning the primary key.  
            If the entity has a single key, just the value is returned.  
            If the entity has a composite key, an IDictionary&lt;string, object&gt; is returned with the key values.
            The key value for the entity will also be updated if the KeyType is a Guid or Identity.
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="entity">实体对象</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperExt.Update``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            为一个特定的实体对象执行UPDATE操作
            Executes an update query for the specified entity.
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="entity">实体对象</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperExt.Delete``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            对特定的实体执行DELETE操作
            Executes a delete query for the specified entity.
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="entity">实体对象</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperExt.Delete``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            删除满足通过查询条件的记录
            Executes a delete query using the specified predicate.
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="predicate">查询条件</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>是否执行成功</returns>
        </member>
        <!-- 对于成员“M:MDORM.DapperExt.DapperExt.GetList``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:MDORM.DapperExt.DapperExt.GetPage``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:MDORM.DapperExt.DapperExt.GetSet``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)”忽略有格式错误的 XML 注释 -->
        <member name="M:MDORM.DapperExt.DapperExt.Count``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据查询条件选择满足条件的记录并返回满足添加的记录条数
            Executes a query using the specified predicate, returning an integer that represents the number of rows that match the query.
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="predicate">查询条件</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>满足条件的记录数</returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperExt.GetMultiple(System.Data.IDbConnection,MDORM.DapperExt.GetMultiplePredicate,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            执行一个查询符合对象的操作并为每个查询返回IMultipleResultReader对象
            Executes a select query for multiple objects, returning IMultipleResultReader for each predicate.
            </summary>
            <param name="connection">数据库连接</param>
            <param name="predicate">查询条件</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperExt.GetMap``1">
            <summary>
            获取特定类型的映射。
            如果这个映射不存在就使用默认的映射生成一个新的映射
            Gets the appropriate mapper for the specified type T. 
            If the mapper for the type is not yet created, a new mapper is generated from the mapper type specifed by DefaultMapper.
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperExt.ClearCache">
            <summary>
            清除sql缓存
            Clears the ClassMappers for each type.
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.DapperExt.GetNextGuid">
            <summary>
            生成一个COMB Guid,解决了分散指数的问题
            Generates a COMB Guid which solves the fragmented index issue.
            See: http://davybrion.com/blog/2009/05/using-the-guidcomb-identifier-strategy
            </summary>
        </member>
        <!-- 对于成员“P:MDORM.DapperExt.DapperExt.DefaultMapper”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“P:MDORM.DapperExt.DapperExt.SqlDialect”忽略有格式错误的 XML 注释 -->
        <member name="P:MDORM.DapperExt.DapperExt.InstanceFactory">
            <summary>
            获取或设置Dapper 扩展实现工厂
            Get or sets the Dapper Extensions Implementation Factory.
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.DapperExt.Instance">
            <summary>
            获取Dapper 扩展实现（使用单例模式）
            Gets the Dapper Extensions Implementation
            </summary>
        </member>
        <member name="T:MDORM.DapperExt.DapperExtConfiguration">
            <summary>
            Dapper 扩展配置
            </summary>
        </member>
        <member name="T:MDORM.DapperExt.IDapperExtConfiguration">
            <summary>
            Dapper扩展配置接口
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.IDapperExtConfiguration.GetMap(System.Type)">
            <summary>
            获取映射
            </summary>
            <param name="entityType">实体类型</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.IDapperExtConfiguration.GetMap``1">
            <summary>
            获取映射
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.IDapperExtConfiguration.ClearCache">
            <summary>
            清除缓存
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.IDapperExtConfiguration.GetNextGuid">
            <summary>
            获得下一个Guid
            </summary>
            <returns></returns>
        </member>
        <member name="P:MDORM.DapperExt.IDapperExtConfiguration.DefaultMapper">
            <summary>
            默认映射
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.IDapperExtConfiguration.MappingAssemblies">
            <summary>
            映射程序集
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.IDapperExtConfiguration.Dialect">
            <summary>
            SQL语言
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.DapperExtConfiguration.GetMap(System.Type)">
            <summary>
            获取映射
            </summary>
            <param name="entityType">实体类型</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperExtConfiguration.GetMap``1">
            <summary>
            获取映射
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperExtConfiguration.ClearCache">
            <summary>
            清除缓存
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.DapperExtConfiguration.GetNextGuid">
            <summary>
            获取下一个Guid
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperExtConfiguration.GetMapType(System.Type)">
            <summary>
            获取映射类型
            </summary>
            <param name="entityType">实体类型</param>
            <returns>类型</returns>
        </member>
        <member name="P:MDORM.DapperExt.DapperExtConfiguration.DefaultMapper">
            <summary>
            默认映射
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.DapperExtConfiguration.MappingAssemblies">
            <summary>
            映射程序集
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.DapperExtConfiguration.Dialect">
            <summary>
            SQL语言
            </summary>
        </member>
        <member name="T:MDORM.DapperExt.DapperImplementor">
            <summary>
            Dapper 实现具体类
            </summary>
        </member>
        <member name="T:MDORM.DapperExt.IDapperImplementor">
            <summary>
            Dapper 实现接口
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.IDapperImplementor.Get``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            获取指定Id的一条记录
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="id">id</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>T类型的实体对象</returns>
        </member>
        <member name="M:MDORM.DapperExt.IDapperImplementor.Insert``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            批量插入特定类型的实体对象集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="entities">实体对象列表</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
        </member>
        <member name="M:MDORM.DapperExt.IDapperImplementor.Insert``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            插入特定类型的实体对象并返回实体ID
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="entity">实体对象</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>实体对象id</returns>
        </member>
        <member name="M:MDORM.DapperExt.IDapperImplementor.Update``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            更新特定类型的对象并返回执行结果
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="entitiy">实体对象列表</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.IDapperImplementor.Delete``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            删除特定类型的对象并返回执行结果
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="entitiy">实体对象列表</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.IDapperImplementor.Delete``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            删除满足特定查询条件的对象并返回执行结果
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="predicate">查询条件</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.IDapperImplementor.GetList``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            获取满足特定查询条件的对象列表并返回
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序列表</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <param name="buffered">是否缓存</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.IDapperImplementor.GetPage``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            分页获取满足特定查询条件的对象列表并返回当前页
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序列表</param>
            <param name="page">页索引</param>
            <param name="resultsPerPage">页大小</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <param name="buffered">是否缓存</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.IDapperImplementor.GetSet``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            获取满足特定查询条件的对象列表并返回区间记录
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序列表</param>
            <param name="firstResult">第一条数据索引</param>
            <param name="maxResults">最大记录的索引</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <param name="buffered">是否缓存</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.IDapperImplementor.Count``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            获取满足特定查询条件的记录条数
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="predicate">查询条件</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.IDapperImplementor.GetMultiple(System.Data.IDbConnection,MDORM.DapperExt.GetMultiplePredicate,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            获取复合查询结果
            </summary>
            <param name="connection">数据库连接</param>
            <param name="predicate">查询条件</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="P:MDORM.DapperExt.IDapperImplementor.SqlGenerator">
            <summary>
            SQL生成接口
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.DapperImplementor.#ctor(MDORM.DapperExt.Sql.ISqlGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:MDORM.DapperExt.DapperImplementor"/> class.
            </summary>
            <param name="sqlGenerator">The SQL generator.</param>
        </member>
        <member name="M:MDORM.DapperExt.DapperImplementor.Get``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            获取指定Id的一条记录
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="id">id</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>
            T类型的实体对象
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperImplementor.Insert``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            批量插入特定类型的实体对象集合
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="entities">实体对象列表</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
        </member>
        <member name="M:MDORM.DapperExt.DapperImplementor.Insert``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            插入法。不能根据实体动态插入（插入全部列）
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="entity">实体对象</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>
            实体对象id
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperImplementor.Update``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            扩展的更新方法，按需更新
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="entity"></param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperImplementor.Delete``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            删除特定类型的对象并返回执行结果
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="entity"></param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperImplementor.Delete``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            删除满足特定查询条件的对象并返回执行结果
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="predicate">查询条件</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperImplementor.GetList``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            获取满足特定查询条件的对象列表并返回
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序列表</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <param name="buffered">是否缓存</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperImplementor.GetPage``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            分页获取满足特定查询条件的对象列表并返回当前页
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序列表</param>
            <param name="page">页索引</param>
            <param name="resultsPerPage">页大小</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <param name="buffered">是否缓存</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperImplementor.GetSet``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            获取满足特定查询条件的对象列表并返回区间记录
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序列表</param>
            <param name="firstResult">第一条数据索引</param>
            <param name="maxResults">最大记录的索引</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <param name="buffered">是否缓存</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperImplementor.Count``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            获取满足特定查询条件的记录条数
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="predicate">查询条件</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperImplementor.GetMultiple(System.Data.IDbConnection,MDORM.DapperExt.GetMultiplePredicate,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            获取复合查询结果
            </summary>
            <param name="connection">数据库连接</param>
            <param name="predicate">查询条件</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperImplementor.GetList``1(System.Data.IDbConnection,MDORM.DapperExt.Mapper.IClassMapper,MDORM.DapperExt.IPredicate,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            根据查询条件获取数据集
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="classMap">类映射</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序列表</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <param name="buffered">if set to <c>true</c> [buffered].</param>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperImplementor.GetPage``1(System.Data.IDbConnection,MDORM.DapperExt.Mapper.IClassMapper,MDORM.DapperExt.IPredicate,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            分页获取特定条件的查询记录
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="classMap">类映射</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序列表</param>
            <param name="page">当前页索引</param>
            <param name="resultsPerPage">页大小</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <param name="buffered">if set to <c>true</c> [buffered].</param>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperImplementor.GetSet``1(System.Data.IDbConnection,MDORM.DapperExt.Mapper.IClassMapper,MDORM.DapperExt.IPredicate,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            获取满足特定查询条件的对象列表并返回区间记录
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>、
            <param name="classMap">实体映射</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序列表</param>
            <param name="firstResult">第一条数据索引</param>
            <param name="maxResults">最大记录的索引</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <param name="buffered">是否缓存</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperImplementor.Delete``1(System.Data.IDbConnection,MDORM.DapperExt.Mapper.IClassMapper,MDORM.DapperExt.IPredicate,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            删除特定类型的对象并返回执行结果
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="classMap">类映射</param>
            <param name="predicate">查询条件</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperImplementor.GetPredicate(MDORM.DapperExt.Mapper.IClassMapper,System.Object)">
            <summary>
            获得查询条件谓词
            </summary>
            <param name="classMap">类映射</param>
            <param name="predicate">查询谓词</param>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperImplementor.GetIdPredicate(MDORM.DapperExt.Mapper.IClassMapper,System.Object)">
            <summary>
            获得Id谓词
            </summary>
            <param name="classMap">类映射</param>
            <param name="id">id</param>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperImplementor.GetKeyPredicate``1(MDORM.DapperExt.Mapper.IClassMapper,``0)">
            <summary>
            获取键谓词
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="classMap">类映射</param>
            <param name="entity">实体对象</param>
            <returns>
            </returns>
            <exception cref="T:System.ArgumentException">At least one Key column must be defined.</exception>
        </member>
        <member name="M:MDORM.DapperExt.DapperImplementor.GetEntityPredicate(MDORM.DapperExt.Mapper.IClassMapper,System.Object)">
            <summary>
            获取实体属性谓词
            </summary>
            <param name="classMap">类映射</param>
            <param name="entity">实体对象</param>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperImplementor.GetMultipleByBatch(System.Data.IDbConnection,MDORM.DapperExt.GetMultiplePredicate,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            批量获取复合谓词
            </summary>
            <param name="connection">数据库连接</param>
            <param name="predicate">查询条件</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.DapperImplementor.GetMultipleBySequence(System.Data.IDbConnection,MDORM.DapperExt.GetMultiplePredicate,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Gets the multiple by sequence.
            </summary>
            <param name="connection">The connection.</param>
            <param name="predicate">The predicate.</param>
            <param name="transaction">The transaction.</param>
            <param name="commandTimeout">The command timeout.</param>
            <returns>
            </returns>
        </member>
        <member name="P:MDORM.DapperExt.DapperImplementor.SqlGenerator">
            <summary>
            SQL生成接口
            </summary>
        </member>
        <member name="T:MDORM.DapperExt.Database">
            <summary>
            数据库
            </summary>
        </member>
        <member name="T:MDORM.DapperExt.IDatabase">
            <summary>
            数据库接口
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            开始事务
            </summary>
            <param name="isolationLevel">隔离水平（默认ReadCommitted）</param>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.Commit">
            <summary>
            提交
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.Rollback">
            <summary>
            回滚
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.RunInTransaction(System.Action)">
            <summary>
            执行事务
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.RunInTransaction``1(System.Func{``0})">
            <summary>
            执行事务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func">The function.</param>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.Get``1(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            获取指定Id的实体内容
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="id">指定的Id</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.Get``1(System.Object,System.Nullable{System.Int32})">
            <summary>
            获取指定Id的实体内容
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="id">指定的Id</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.Insert``1(System.Collections.Generic.IEnumerable{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            批量插入特定的实体对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entities">实体对象列表</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.Insert``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Int32})">
            <summary>
            批量插入实体列表
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entities">实体对象列表</param>
            <param name="commandTimeout">超时时间</param>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.Insert``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            插入特定的实体对象并返回对象主键
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entity">实体对象</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.Insert``1(``0,System.Nullable{System.Int32})">
            <summary>
            插入特定的实体对象并返回对象主键
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entity">实体对象</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.Update``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            更新特定的实体对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entity">实体对象</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.Update``1(``0,System.Nullable{System.Int32})">
            <summary>
            更新特定的实体对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entity">实体对象</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.Delete``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            删除特定的实体对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entity">实体对象</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>是否操作成功</returns>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.Delete``1(``0,System.Nullable{System.Int32})">
            <summary>
            删除特定的实体对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entity">实体对象</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.Delete``1(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            删除满足条件的对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="predicate">查询条件</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.Delete``1(System.Object,System.Nullable{System.Int32})">
            <summary>
            删除满足条件的对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="predicate">查询条件</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.GetList``1(System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            根据查询条件获取结果数据集
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="predicate">查询条件</param>
            <param name="sort">排序列表</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <param name="buffered">if set to <c>true</c> [buffered].</param>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.GetList``1(System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            根据查询条件获取结果数据集
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="predicate">查询条件</param>
            <param name="sort">排序列表</param>
            <param name="commandTimeout">超时时间</param>
            <param name="buffered">if set to <c>true</c> [buffered].</param>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.GetPage``1(System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            根据查询条件分页获取结果数据集
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="predicate">查询条件</param>
            <param name="sort">排序列表</param>
            <param name="page">页索引</param>
            <param name="resultsPerPage">页大小</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <param name="buffered">if set to <c>true</c> [buffered].</param>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.GetPage``1(System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Int32,System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            根据查询条件分页获取结果数据集
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="predicate">查询条件</param>
            <param name="sort">排序列表</param>
            <param name="page">页索引</param>
            <param name="resultsPerPage">页大小</param>
            <param name="commandTimeout">超时时间</param>
            <param name="buffered">if set to <c>true</c> [buffered].</param>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.GetSet``1(System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            根据查询条件获取结果数据集
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="predicate">查询条件</param>
            <param name="sort">排序列表</param>
            <param name="firstResult">第一条结果索引</param>
            <param name="maxResults">最大结果所以</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <param name="buffered">if set to <c>true</c> [buffered].</param>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.GetSet``1(System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Int32,System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            根据查询条件获取结果数据集
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="predicate">查询条件</param>
            <param name="sort">排序列表</param>
            <param name="firstResult">第一条结果索引</param>
            <param name="maxResults">最大结果所以</param>
            <param name="commandTimeout">超时时间</param>
            <param name="buffered">if set to <c>true</c> [buffered].</param>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.Count``1(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据查询条件获取结果数据集
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="predicate">查询条件</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.Count``1(System.Object,System.Nullable{System.Int32})">
            <summary>
            根据查询条件获取结果数据集
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="predicate">查询条件</param>
            <param name="commandTimeout">超时时间</param>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.GetMultiple(MDORM.DapperExt.GetMultiplePredicate,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据查询条件获取复合结果
            </summary>
            <param name="predicate">查询条件</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.GetMultiple(MDORM.DapperExt.GetMultiplePredicate,System.Nullable{System.Int32})">
            <summary>
            根据查询条件获取复合结果
            </summary>
            <param name="predicate">查询条件</param>
            <param name="commandTimeout">超时时间</param>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.ClearCache">
            <summary>
            清除缓存
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.GetNextGuid">
            <summary>
            获取下一个Guid
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.IDatabase.GetMap``1">
            <summary>
            获取类映射
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns>
            </returns>
        </member>
        <member name="P:MDORM.DapperExt.IDatabase.HasActiveTransaction">
            <summary>
            是否有活动的事务
            </summary>
            <value>
            <c>true</c> if this instance has active transaction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.IDatabase.Connection">
            <summary>
            获取数据库连接
            </summary>
            <value>
            The connection.
            </value>
        </member>
        <member name="M:MDORM.DapperExt.Database.#ctor(System.Data.IDbConnection,MDORM.DapperExt.Sql.ISqlGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:MDORM.DapperExt.Database"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="sqlGenerator">The SQL generator.</param>
        </member>
        <member name="M:MDORM.DapperExt.Database.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Database.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            开始事务
            </summary>
            <param name="isolationLevel">隔离水平（默认ReadCommitted）</param>
        </member>
        <member name="M:MDORM.DapperExt.Database.Commit">
            <summary>
            提交
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Database.Rollback">
            <summary>
            回滚
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Database.RunInTransaction(System.Action)">
            <summary>
            执行事务
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:MDORM.DapperExt.Database.RunInTransaction``1(System.Func{``0})">
            <summary>
            执行事务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func">The function.</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Database.Get``1(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            获取指定Id的实体内容
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="id">指定的Id</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Database.Get``1(System.Object,System.Nullable{System.Int32})">
            <summary>
            获取指定Id的实体内容
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="id">指定的Id</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Database.Insert``1(System.Collections.Generic.IEnumerable{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            批量插入特定的实体对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entities">实体对象列表</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
        </member>
        <member name="M:MDORM.DapperExt.Database.Insert``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Int32})">
            <summary>
            批量插入实体列表
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entities">实体对象列表</param>
            <param name="commandTimeout">超时时间</param>
        </member>
        <member name="M:MDORM.DapperExt.Database.Insert``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            插入特定的实体对象并返回对象主键
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entity">实体对象</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Database.Insert``1(``0,System.Nullable{System.Int32})">
            <summary>
            插入特定的实体对象并返回对象主键
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entity">实体对象</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Database.Update``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            更新特定的实体对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entity">实体对象</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Database.Update``1(``0,System.Nullable{System.Int32})">
            <summary>
            更新特定的实体对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entity">实体对象</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Database.Delete``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            删除特定的实体对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entity">实体对象</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>
            是否操作成功
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.Database.Delete``1(``0,System.Nullable{System.Int32})">
            <summary>
            删除特定的实体对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entity">实体对象</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Database.Delete``1(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            删除满足条件的对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="predicate">查询条件</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Database.Delete``1(System.Object,System.Nullable{System.Int32})">
            <summary>
            删除满足条件的对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="predicate">查询条件</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Database.GetList``1(System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            根据查询条件获取结果数据集
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="predicate">查询条件</param>
            <param name="sort">排序列表</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <param name="buffered">if set to <c>true</c> [buffered].</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Database.GetList``1(System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            根据查询条件获取结果数据集
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="predicate">查询条件</param>
            <param name="sort">排序列表</param>
            <param name="commandTimeout">超时时间</param>
            <param name="buffered">if set to <c>true</c> [buffered].</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Database.GetPage``1(System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            根据查询条件分页获取结果数据集
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="predicate">查询条件</param>
            <param name="sort">排序列表</param>
            <param name="page">页索引</param>
            <param name="resultsPerPage">页大小</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <param name="buffered">if set to <c>true</c> [buffered].</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Database.GetPage``1(System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Int32,System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            根据查询条件分页获取结果数据集
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="predicate">查询条件</param>
            <param name="sort">排序列表</param>
            <param name="page">页索引</param>
            <param name="resultsPerPage">页大小</param>
            <param name="commandTimeout">超时时间</param>
            <param name="buffered">if set to <c>true</c> [buffered].</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Database.GetSet``1(System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            根据查询条件获取结果数据集
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="predicate">查询条件</param>
            <param name="sort">排序列表</param>
            <param name="firstResult">第一条结果索引</param>
            <param name="maxResults">最大结果所以</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <param name="buffered">if set to <c>true</c> [buffered].</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Database.GetSet``1(System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Int32,System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            根据查询条件获取结果数据集
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="predicate">查询条件</param>
            <param name="sort">排序列表</param>
            <param name="firstResult">第一条结果索引</param>
            <param name="maxResults">最大结果所以</param>
            <param name="commandTimeout">超时时间</param>
            <param name="buffered">if set to <c>true</c> [buffered].</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Database.Count``1(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据查询条件获取结果数据集
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="predicate">查询条件</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Database.Count``1(System.Object,System.Nullable{System.Int32})">
            <summary>
            根据查询条件获取结果数据集
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="predicate">查询条件</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Database.GetMultiple(MDORM.DapperExt.GetMultiplePredicate,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据查询条件获取复合结果
            </summary>
            <param name="predicate">查询条件</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Database.GetMultiple(MDORM.DapperExt.GetMultiplePredicate,System.Nullable{System.Int32})">
            <summary>
            根据查询条件获取复合结果
            </summary>
            <param name="predicate">查询条件</param>
            <param name="commandTimeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Database.ClearCache">
            <summary>
            清除缓存
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Database.GetNextGuid">
            <summary>
            获取下一个Guid
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Database.GetMap``1">
            <summary>
            获取类映射
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="P:MDORM.DapperExt.Database.HasActiveTransaction">
            <summary>
            是否有活动的事务
            </summary>
            <value>
            <c>true</c> if this instance has active transaction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.Database.Connection">
            <summary>
            获取数据库连接
            </summary>
            <value>
            The connection.
            </value>
        </member>
        <member name="T:MDORM.DapperExt.GetMultiplePredicate">
            <summary>
            获取复合结果谓词
            </summary>
        </member>
        <member name="T:MDORM.DapperExt.GetMultiplePredicate.GetMultiplePredicateItem">
            <summary>
            获取复合谓词项
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.GetMultiplePredicate.GetMultiplePredicateItem.Value">
            <summary>
            获取或设置值
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.GetMultiplePredicate.GetMultiplePredicateItem.Type">
            <summary>
            获取或设置类型
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.GetMultiplePredicate.GetMultiplePredicateItem.Sort">
            <summary>
            获取或设置排序列表
            </summary>
            <value>
            The sort.
            </value>
        </member>
        <member name="T:MDORM.DapperExt.IMultipleResultReader">
            <summary>
            复合结果读取器接口
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.IMultipleResultReader.Read``1">
            <summary>
            读取
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:MDORM.DapperExt.GridReaderResultReader">
            <summary>
            表格结果读取器
            </summary>
        </member>
        <member name="T:MDORM.DapperExt.SequenceReaderResultReader">
            <summary>
            循环读取结果读取器
            </summary>
        </member>
        <member name="T:MDORM.DapperExt.Mapper.AutoClassMapper`1">
            <summary>
            自动将一个实体映射到一个表，使用反射和命名约定的组合键
            Automatically maps an entity to a table using a combination of reflection and naming conventions for keys.
            </summary>
        </member>
        <member name="T:MDORM.DapperExt.Mapper.ClassMapper`1">
            <summary>
            通过属性映射的集合将一个实体映射到一个表
            Maps an entity to a table through a collection of property maps.
            </summary>
        </member>
        <member name="T:MDORM.DapperExt.Mapper.IClassMapper`1">
            <summary>
            IClassMapper接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MDORM.DapperExt.Mapper.IClassMapper">
            <summary>
            IClassMapper接口
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.Mapper.IClassMapper.SchemaName">
            <summary>
            模式名称
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.Mapper.IClassMapper.TableName">
            <summary>
            表名称
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.Mapper.IClassMapper.Properties">
            <summary>
            属性列表
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.Mapper.IClassMapper.EntityType">
            <summary>
            类型
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Mapper.ClassMapper`1.#ctor">
            <summary>
            构造函数，初始化默认的类型
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Mapper.ClassMapper`1.Schema(System.String)">
            <summary>
            模式名称
            </summary>
            <param name="schemaName"></param>
        </member>
        <member name="M:MDORM.DapperExt.Mapper.ClassMapper`1.Table(System.String)">
            <summary>
            表名称
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:MDORM.DapperExt.Mapper.ClassMapper`1.AutoMap">
            <summary>
            自动映射方法
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Mapper.ClassMapper`1.AutoMap(System.Func{System.Type,System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            自动映射
            </summary>
            <param name="canMap"></param>
        </member>
        <member name="M:MDORM.DapperExt.Mapper.ClassMapper`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            映实体属性射到一数据库表中的某一列
            Fluently, maps an entity property to a column
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Mapper.ClassMapper`1.Map(System.Reflection.PropertyInfo)">
            <summary>
            映实体属性射到一数据库表中的某一列
            Fluently, maps an entity property to a column
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Mapper.ClassMapper`1.GuardForDuplicatePropertyMap(MDORM.DapperExt.Mapper.PropertyMap)">
            <summary>
            判断是否是重复的属性,是就抛出异常
            </summary>
            <exception cref="T:System.ArgumentException">重复的映射属性异常</exception>
            <param name="result"></param>
        </member>
        <member name="P:MDORM.DapperExt.Mapper.ClassMapper`1.SchemaName">
            <summary>
            获取或设置数据库模式
            Gets or sets the schema to use when referring to the corresponding table name in the database.
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.Mapper.ClassMapper`1.TableName">
            <summary>
            获取或设置表名称
            Gets or sets the table to use in the database.
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.Mapper.ClassMapper`1.Properties">
            <summary>
            映射到数据库表的属性集合
            A collection of properties that will map to columns in the database table.
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.Mapper.ClassMapper`1.EntityType">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.Mapper.ClassMapper`1.PropertyTypeKeyTypeMapping">
            <summary>
            属性类型和键类型的映射
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Mapper.AutoClassMapper`1.#ctor">
            <summary>
            自动生成类映射
            </summary>
        </member>
        <member name="T:MDORM.DapperExt.Mapper.IPropertyMap">
            <summary>
            实体属性映射到数据库中相应的列
            Maps an entity property to its corresponding column in the database.
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.Mapper.IPropertyMap.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.Mapper.IPropertyMap.ColumnName">
            <summary>
            列名称
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.Mapper.IPropertyMap.Ignored">
            <summary>
            是否忽略
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.Mapper.IPropertyMap.IsReadOnly">
            <summary>
            是否是只读的
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.Mapper.IPropertyMap.KeyType">
            <summary>
            键类型
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.Mapper.IPropertyMap.PropertyInfo">
            <summary>
            属性
            </summary>
        </member>
        <member name="T:MDORM.DapperExt.Mapper.PluralizedAutoClassMapper`1">
            <summary>
            使用反射和命名约定的组合键自动将一个实体映射到一个表
            和AutoClassMapper相同，但会自动尝试兼职表名
            例如: Peson 的实体将会到映射到 Person 表
            Automatically maps an entity to a table using a combination of reflection and naming conventions for keys. 
            Identical to AutoClassMapper, but attempts to pluralize table names automatically.
            Example: Person entity maps to People table
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Mapper.PluralizedAutoClassMapper`1.Table(System.String)">
            <summary>
            设置表名称
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="T:MDORM.DapperExt.Mapper.PluralizedAutoClassMapper`1.Formatting">
            <summary>
            Adapted from: http://mattgrande.wordpress.com/2009/10/28/pluralization-helper-for-c/
            </summary>
        </member>
        <member name="T:MDORM.DapperExt.Mapper.PropertyMap">
            <summary>
            实体属性映射到数据库中相应的列。
            Maps an entity property to its corresponding column in the database.
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Mapper.PropertyMap.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            构造函数
            </summary>
            <param name="propertyInfo">属性</param>
        </member>
        <member name="M:MDORM.DapperExt.Mapper.PropertyMap.Column(System.String)">
            <summary>
            设置当前属性的列名称
            </summary>
            <param name="columnName">数据库中存在的列，The column name as it exists in the database.</param>
        </member>
        <member name="M:MDORM.DapperExt.Mapper.PropertyMap.Key(MDORM.DapperExt.Mapper.KeyType)">
            <summary>
            设置当前属性的键类型（当前字段不能设置成忽略的或是只读的）
            </summary>
            <param name="keyType">键类型枚举</param>
            <exception cref="T:System.ArgumentException">当前属性不能是忽略的</exception>
            /// <exception cref="T:System.ArgumentException">当前属性不能是只读的</exception>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Mapper.PropertyMap.Ignore">
            <summary>
            设置当前属性为忽略
            Fluently sets the ignore status of the property.
            </summary>
            <exception cref="T:System.ArgumentException">当前属性的键类型不能为：NotAKey</exception>
        </member>
        <member name="M:MDORM.DapperExt.Mapper.PropertyMap.ReadOnly">
            <summary>
            设置当前属性为只读
            Fluently sets the read-only status of the property.
            </summary>
            <exception cref="T:System.ArgumentException">当前属性的键类型不能为：NotAKey</exception>
        </member>
        <member name="P:MDORM.DapperExt.Mapper.PropertyMap.Name">
            <summary>
            获取当前属性的特定（中文）名称
            Gets the name of the property by using the specified propertyInfo.
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.Mapper.PropertyMap.ColumnName">
            <summary>
            获取当前属性的列名称
            Gets the column name for the current property.
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.Mapper.PropertyMap.KeyType">
            <summary>
            获取当前属性的KeyType
            Gets the key type for the current property.
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.Mapper.PropertyMap.Ignored">
            <summary>
            获取是否忽视当前的属性。如果忽视,当前的属性将不会被包括在查询中。
            Gets the ignore status of the current property. If ignored, the current property will not be included in queries.
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.Mapper.PropertyMap.IsReadOnly">
            <summary>
            获取当前的属性是否是只读的，如果是，当前的属性将不会被包括在INSERT和UPDATE查询中。
            Gets the read-only status of the current property. If read-only, the current property will not be included in INSERT and UPDATE queries.
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.Mapper.PropertyMap.PropertyInfo">
            <summary>
            获取当前属性的属性信息
            Gets the property info for the current property.
            </summary>
        </member>
        <member name="T:MDORM.DapperExt.Mapper.KeyType">
            <summary>
            键类型枚举
            ClassMapper用来确定实体哪个属性表示什么类型的键
            Used by ClassMapper to determine which entity property represents the key.
            </summary>
        </member>
        <member name="F:MDORM.DapperExt.Mapper.KeyType.NotAKey">
            <summary>
            属性不是主键,不会自动管理
            The property is not a key and is not automatically managed.
            </summary>
        </member>
        <member name="F:MDORM.DapperExt.Mapper.KeyType.Identity">
            <summary>
            属性是一个基于数据库Int自增长的
            The property is an integery-based identity generated from the database.
            </summary>
        </member>
        <member name="F:MDORM.DapperExt.Mapper.KeyType.Guid">
            <summary>
            属性是由框架自动管理的Guid主键
            The property is a Guid identity which is automatically managed.
            </summary>
        </member>
        <member name="F:MDORM.DapperExt.Mapper.KeyType.Assigned">
            <summary>
            属性不是自动管理的键
            The property is a key that is not automatically managed.
            </summary>
        </member>
        <member name="T:MDORM.DapperExt.BasePredicate">
            <summary>
            具体的基本谓词类
            </summary>
        </member>
        <member name="T:MDORM.DapperExt.IBasePredicate">
            <summary>
            基础谓词接口
            </summary>
        </member>
        <member name="T:MDORM.DapperExt.IPredicate">
            <summary>
            谓词接口
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.IPredicate.GetSql(MDORM.DapperExt.Sql.ISqlGenerator,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取SQL语句
            </summary>
            <param name="sqlGenerator">SQL生成接口</param>
            <param name="parameters">参数</param>
            <returns>
            </returns>
        </member>
        <member name="P:MDORM.DapperExt.IBasePredicate.PropertyName">
            <summary>
            获取或设置属性名称
            </summary>
            <value>
            属性名称
            </value>
        </member>
        <member name="M:MDORM.DapperExt.BasePredicate.GetSql(MDORM.DapperExt.Sql.ISqlGenerator,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取SQL语句
            </summary>
            <param name="sqlGenerator">SQL生成接口</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.BasePredicate.GetColumnName(System.Type,MDORM.DapperExt.Sql.ISqlGenerator,System.String)">
            <summary>
            获取列的名称
            </summary>
            <param name="entityType">实体类型</param>
            <param name="sqlGenerator">SQL语句生成</param>
            <param name="propertyName">属性的名称</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">
            </exception>
        </member>
        <member name="P:MDORM.DapperExt.BasePredicate.PropertyName">
            <summary>
            获取或设置属性名称
            </summary>
            <value>
            属性名称
            </value>
        </member>
        <member name="T:MDORM.DapperExt.BetweenPredicate`1">
            <summary>
            具体区间谓词类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MDORM.DapperExt.IBetweenPredicate">
            <summary>
            区间谓词接口
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.IBetweenPredicate.PropertyName">
            <summary>
            获取或设置属性名称
            </summary>
            <value>
            The name of the property.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.IBetweenPredicate.Value">
            <summary>
            获取或设置区间值
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.IBetweenPredicate.Not">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MDORM.DapperExt.IBetweenPredicate"/> is not.
            </summary>
            <value>
              <c>true</c> if not; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MDORM.DapperExt.BetweenPredicate`1.GetSql(MDORM.DapperExt.Sql.ISqlGenerator,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取SQL语句
            </summary>
            <param name="sqlGenerator">SQL生成接口</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="P:MDORM.DapperExt.BetweenPredicate`1.Value">
            <summary>
            获取或设置区间值
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.BetweenPredicate`1.Not">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MDORM.DapperExt.IBetweenPredicate"/> is not.
            </summary>
            <value>
              <c>true</c> if not; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MDORM.DapperExt.BetweenValues">
            <summary>
            区间内容
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.BetweenValues.Value1">
            <summary>
            获取或设置内容1
            </summary>
            <value>
            The value1.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.BetweenValues.Value2">
            <summary>
            获取或设置内容2
            </summary>
            <value>
            The value2.
            </value>
        </member>
        <member name="T:MDORM.DapperExt.ComparePredicate">
            <summary>
            比较谓词具体实现
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.ComparePredicate.GetOperatorString">
            <summary>
            获得操作字符串
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:MDORM.DapperExt.ComparePredicate.Operator">
            <summary>
            获取或设置操作类型
            </summary>
            <value>
            The operator.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.ComparePredicate.Not">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MDORM.DapperExt.ComparePredicate"/> is not.
            </summary>
            <value>
              <c>true</c> if not; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MDORM.DapperExt.ExistsPredicate`1">
            <summary>
            具体的存在谓语
            </summary>
            <typeparam name="TSub">The type of the sub.</typeparam>
        </member>
        <member name="T:MDORM.DapperExt.IExistsPredicate">
            <summary>
            存在谓词接口
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.IExistsPredicate.Predicate">
            <summary>
            获取或设置条件谓语
            </summary>
            <value>
            The predicate.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.IExistsPredicate.Not">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MDORM.DapperExt.IExistsPredicate"/> is not.
            </summary>
            <value>
              <c>true</c> if not; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MDORM.DapperExt.ExistsPredicate`1.GetSql(MDORM.DapperExt.Sql.ISqlGenerator,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取SQL语句
            </summary>
            <param name="sqlGenerator">SQL生成接口</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.ExistsPredicate`1.GetClassMapper(System.Type,MDORM.DapperExt.IDapperExtConfiguration)">
            <summary>
            获取类映射
            </summary>
            <param name="type">类型</param>
            <param name="configuration">配置</param>
            <returns>
            </returns>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="P:MDORM.DapperExt.ExistsPredicate`1.Predicate">
            <summary>
            获取或设置条件谓语
            </summary>
            <value>
            The predicate.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.ExistsPredicate`1.Not">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MDORM.DapperExt.IExistsPredicate"/> is not.
            </summary>
            <value>
              <c>true</c> if not; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MDORM.DapperExt.FieldPredicate`1">
            <summary>
            字段谓词的具体实现
            </summary>
            <typeparam name="T">类型名称</typeparam>
        </member>
        <member name="T:MDORM.DapperExt.IFieldPredicate">
            <summary>
            字段谓词接口
            </summary>
        </member>
        <member name="T:MDORM.DapperExt.IComparePredicate">
            <summary>
            比较谓词接口
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.IComparePredicate.Operator">
            <summary>
            获取或设置操作类型
            </summary>
            <value>
            The operator.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.IComparePredicate.Not">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MDORM.DapperExt.IComparePredicate"/> is not.
            </summary>
            <value>
              <c>true</c> if not; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.IFieldPredicate.Value">
            <summary>
            获取或设置值
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:MDORM.DapperExt.FieldPredicate`1.GetSql(MDORM.DapperExt.Sql.ISqlGenerator,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取SQL语句
            </summary>
            <param name="sqlGenerator">SQL生成接口</param>
            <param name="parameters">参数</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Operator must be set to Eq for Enumerable types</exception>
        </member>
        <member name="P:MDORM.DapperExt.FieldPredicate`1.Value">
            <summary>
            获取或设置值
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:MDORM.DapperExt.GroupOperator">
            <summary>
            用来和其他谓词组连接的操作枚举
            Operator to use when joining predicates in a PredicateGroup.
            </summary>
        </member>
        <member name="F:MDORM.DapperExt.GroupOperator.And">
            <summary>
            并且
            </summary>
        </member>
        <member name="F:MDORM.DapperExt.GroupOperator.Or">
            <summary>
            或者
            </summary>
        </member>
        <member name="T:MDORM.DapperExt.IPredicateGroup">
            <summary>
            谓词组接口
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.IPredicateGroup.Operator">
            <summary>
            获取或设置操作类型
            </summary>
            <value>
            The operator.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.IPredicateGroup.Predicates">
            <summary>
            获取或者设置谓语
            </summary>
            <value>
            The predicates.
            </value>
        </member>
        <member name="T:MDORM.DapperExt.IPropertyPredicate">
            <summary>
            属性谓词接口
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.IPropertyPredicate.PropertyName2">
            <summary>
            获取或设置属性2
            </summary>
            <value>
            The property name2.
            </value>
        </member>
        <member name="T:MDORM.DapperExt.ISort">
            <summary>
            排序接口
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.ISort.PropertyName">
            <summary>
            获取或设置属性名称
            </summary>
            <value>
            The name of the property.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.ISort.Ascending">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MDORM.DapperExt.ISort"/> is ascending.
            </summary>
            <value>
              <c>true</c> if ascending; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MDORM.DapperExt.Operator">
            <summary>
            比较操作枚举
            Comparison operator for predicates.
            </summary>
        </member>
        <member name="F:MDORM.DapperExt.Operator.Eq">
            <summary>
            等于
            Equal to
            </summary>
        </member>
        <member name="F:MDORM.DapperExt.Operator.Gt">
            <summary>
            大于
            Greater than
            </summary>
        </member>
        <member name="F:MDORM.DapperExt.Operator.Ge">
            <summary>
            大于或者等于
            Greater than or equal to
            </summary>
        </member>
        <member name="F:MDORM.DapperExt.Operator.Lt">
            <summary>
            小于
            Less than
            </summary>
        </member>
        <member name="F:MDORM.DapperExt.Operator.Le">
            <summary>
            大于或者等于
            Less than or equal to
            </summary>
        </member>
        <member name="F:MDORM.DapperExt.Operator.Like">
            <summary>
            模糊（你可以使用 %）
            Like (You can use % in the value to do wilcard searching)
            </summary>
        </member>
        <member name="T:MDORM.DapperExt.PredicateGroup">
            <summary>
            合指定的组操作符一起使用的谓词组
            Groups IPredicates together using the specified group operator.
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.PredicateGroup.GetSql(MDORM.DapperExt.Sql.ISqlGenerator,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取SQL语句
            </summary>
            <param name="sqlGenerator">SQL生成接口</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="P:MDORM.DapperExt.PredicateGroup.Operator">
            <summary>
            获取或设置操作类型
            </summary>
            <value>
            The operator.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.PredicateGroup.Predicates">
            <summary>
            获取或者设置谓语
            </summary>
            <value>
            The predicates.
            </value>
        </member>
        <member name="T:MDORM.DapperExt.Predicates">
            <summary>
            条件谓词
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Predicates.Field``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MDORM.DapperExt.Operator,System.Object,System.Boolean)">
            <summary>
            创建一个新的IFieldPrediate的工厂方法
            比如WHERE FistName = 'Foo'
            Factory method that creates a new IFieldPredicate predicate: [FieldName] [Operator] [Value]. 
            Example: WHERE FirstName = 'Foo'
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="expression">An expression that returns the left operand [FieldName].</param>
            <param name="op">比较操作</param>
            <param name="value">查询谓词内容</param>
            <param name="not">Effectively inverts the comparison operator. Example: WHERE FirstName &lt;&gt; 'Foo'.</param>
            <returns>An instance of IFieldPredicate.</returns>
        </member>
        <member name="M:MDORM.DapperExt.Predicates.Property``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MDORM.DapperExt.Operator,System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.Boolean)">
            <summary>
            Factory method that creates a new IPropertyPredicate predicate: [FieldName1] [Operator] [FieldName2]
            Example: WHERE FirstName = LastName
            </summary>
            <typeparam name="T">The type of the entity for the left operand.</typeparam>
            <typeparam name="T2">The type of the entity for the right operand.</typeparam>
            <param name="expression">An expression that returns the left operand [FieldName1].</param>
            <param name="op">The comparison operator.</param>
            <param name="expression2">An expression that returns the right operand [FieldName2].</param>
            <param name="not">Effectively inverts the comparison operator. Example: WHERE FirstName &lt;&gt; LastName </param>
            <returns>An instance of IPropertyPredicate.</returns>
        </member>
        <member name="M:MDORM.DapperExt.Predicates.Group(MDORM.DapperExt.GroupOperator,MDORM.DapperExt.IPredicate[])">
            <summary>
            创建IPredicateGroup 谓词的工厂方法
            谓词组可以和其他的谓词组连接
            Factory method that creates a new IPredicateGroup predicate.
            Predicate groups can be joined together with other predicate groups.
            </summary>
            <param name="op">The grouping operator to use when joining the predicates (AND / OR).</param>
            <param name="predicate">A list of predicates to group.</param>
            <returns>An instance of IPredicateGroup.</returns>
        </member>
        <member name="M:MDORM.DapperExt.Predicates.Exists``1(MDORM.DapperExt.IPredicate,System.Boolean)">
            <summary>
            创建IExistsPredicate谓词的工厂方法
            Factory method that creates a new IExistsPredicate predicate.
            </summary>
            <typeparam name="TSub">类型</typeparam>
            <param name="predicate">添加谓语</param>
            <param name="not">if set to <c>true</c> [not].</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Predicates.Between``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MDORM.DapperExt.BetweenValues,System.Boolean)">
            <summary>
            创建IBetweenPredicate的工厂方法
            Factory method that creates a new IBetweenPredicate predicate. 
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="expression">表达式</param>
            <param name="values">值</param>
            <param name="not">if set to <c>true</c> [not].</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Predicates.Sort``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            创建排序的工厂方法
            Factory method that creates a new Sort which controls how the results will be sorted.
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="expression">表达式</param>
            <param name="ascending">if set to <c>true</c> [ascending].</param>
            <returns></returns>
        </member>
        <member name="T:MDORM.DapperExt.PropertyPredicate`2">
            <summary>
            具体属性谓词类
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
        </member>
        <member name="M:MDORM.DapperExt.PropertyPredicate`2.GetSql(MDORM.DapperExt.Sql.ISqlGenerator,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取SQL语句
            </summary>
            <param name="sqlGenerator">SQL生成接口</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="P:MDORM.DapperExt.PropertyPredicate`2.PropertyName2">
            <summary>
            获取或设置属性2
            </summary>
            <value>
            The property name2.
            </value>
        </member>
        <member name="T:MDORM.DapperExt.Sort">
            <summary>
            具体排序类
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.Sort.PropertyName">
            <summary>
            获取或设置属性名称
            </summary>
            <value>
            The name of the property.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.Sort.Ascending">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MDORM.DapperExt.ISort"/> is ascending.
            </summary>
            <value>
              <c>true</c> if ascending; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MDORM.DapperExt.ReflectionHelper">
            <summary>
            反射帮助类
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.ReflectionHelper.GetProperty(System.Linq.Expressions.LambdaExpression)">
            <summary>
            获得属性
            </summary>
            <param name="lambda">lambda表达式</param>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.ReflectionHelper.GetObjectValues(System.Object)">
            <summary>
            修改的方法。自动去除掉对象中那些值为空的属性并返回一个键值字典
            </summary>
            <param name="obj">具体的实体对象</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.ReflectionHelper.AppendStrings(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            把List中的元素按照分割父拼接起来
            </summary>
            <param name="list">包含元素的List</param>
            <param name="seperator">分隔符，默认为，</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.ReflectionHelper.IsSimpleType(System.Type)">
            <summary>
            是否是简单类型（值类型）
            </summary>
            <param name="type">类型</param>
            <returns>是否</returns>
        </member>
        <member name="M:MDORM.DapperExt.ReflectionHelper.GetParameterName(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Char)">
            <summary>
            获取参数名称
            </summary>
            <param name="parameters">参数列表</param>
            <param name="parameterName">参数名称</param>
            <param name="parameterPrefix">参数前缀</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.ReflectionHelper.SetParameterName(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Object,System.Char)">
            <summary>
            设置参数
            </summary>
            <param name="parameters">参数列表</param>
            <param name="parameterName">参数名称</param>
            <param name="value">值</param>
            <param name="parameterPrefix">参数前缀</param>
            <returns></returns>
        </member>
        <member name="T:MDORM.DapperExt.Sql.ISqlDialect">
            <summary>
            SQL语言接口
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Sql.ISqlDialect.GetTableName(System.String,System.String,System.String)">
            <summary>
            获取表名称
            </summary>
            <param name="schemaName">架构名称</param>
            <param name="tableName">表名称</param>
            <param name="alias">别名</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.ISqlDialect.GetColumnName(System.String,System.String,System.String)">
            <summary>
            获取列名称
            </summary>
            <param name="prefix">前缀</param>
            <param name="columnName">列的名称</param>
            <param name="alias">别名</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.ISqlDialect.GetIdentitySql(System.String)">
            <summary>
            获取主键SQL
            </summary>
            <param name="tableName">表名称</param>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.ISqlDialect.GetPagingSql(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取分页SQL
            </summary>
            <param name="sql">SQL</param>
            <param name="page">页索引</param>
            <param name="resultsPerPage">页大小</param>
            <param name="parameters">参数</param>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.ISqlDialect.GetSetSql(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取Set SQL
            </summary>
            <param name="sql">SQL</param>
            <param name="firstResult">第一个结果索引</param>
            <param name="maxResults">最大结果索引</param>
            <param name="parameters">参数</param>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.ISqlDialect.IsQuoted(System.String)">
            <summary>
            是否是应用
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.ISqlDialect.QuoteString(System.String)">
            <summary>
            应用字符串
            </summary>
            <param name="value">The value.</param>
            <returns>
            </returns>
        </member>
        <member name="P:MDORM.DapperExt.Sql.ISqlDialect.OpenQuote">
            <summary>
            获取开始引用的字符
            </summary>
            <value>
            The open quote.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.Sql.ISqlDialect.CloseQuote">
            <summary>
            获取关闭应用的字符
            </summary>
            <value>
            The close quote.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.Sql.ISqlDialect.BatchSeperator">
            <summary>
            获取批量时的分割字符
            </summary>
            <value>
            The batch seperator.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.Sql.ISqlDialect.SupportsMultipleStatements">
            <summary>
            获取是否支持复杂声明
            </summary>
            <value>
            <c>true</c> if [supports multiple statements]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.Sql.ISqlDialect.ParameterPrefix">
            <summary>
            获取参数前缀
            </summary>
            <value>
            The parameter prefix.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.Sql.ISqlDialect.EmptyExpression">
            <summary>
            获取控的表达式
            </summary>
            <value>
            The empty expression.
            </value>
        </member>
        <member name="T:MDORM.DapperExt.Sql.ISqlGenerator">
            <summary>
            SQL生成接口
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Sql.ISqlGenerator.Select(MDORM.DapperExt.Mapper.IClassMapper,MDORM.DapperExt.IPredicate,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            生成SELECTSQL语句
            </summary>
            <param name="classMap">类映射</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序列表</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.ISqlGenerator.SelectPaged(MDORM.DapperExt.Mapper.IClassMapper,MDORM.DapperExt.IPredicate,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            生成SelectPagedSQL语句
            </summary>
            <param name="classMap">类映射</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序</param>
            <param name="page">页索引</param>
            <param name="resultsPerPage">页大小</param>
            <param name="parameters">参数</param>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.ISqlGenerator.SelectSet(MDORM.DapperExt.Mapper.IClassMapper,MDORM.DapperExt.IPredicate,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            生成SelectSet的SQL
            </summary>
            <param name="classMap">类映射</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序条件</param>
            <param name="firstResult">第一个结果索引</param>
            <param name="maxResults">最大结果</param>
            <param name="parameters">参数</param>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.ISqlGenerator.Count(MDORM.DapperExt.Mapper.IClassMapper,MDORM.DapperExt.IPredicate,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            生成Count的SQL語句
            </summary>
            <param name="classMap">类映射</param>
            <param name="predicate">查询条件</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.ISqlGenerator.Insert(MDORM.DapperExt.Mapper.IClassMapper)">
            <summary>
            生成插入语句
            </summary>
            <param name="classMap">类映射</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.ISqlGenerator.Update(MDORM.DapperExt.Mapper.IClassMapper,MDORM.DapperExt.IPredicate,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            原始更新方法。不能根据实体动态更新（更新全部列）
            </summary>
            <param name="classMap">类映射</param>
            <param name="predicate">查询条件</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.ISqlGenerator.Delete(MDORM.DapperExt.Mapper.IClassMapper,MDORM.DapperExt.IPredicate,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Deletes the specified class map.
            </summary>
            <param name="classMap">类映射</param>
            <param name="predicate">查询条件</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.ISqlGenerator.IdentitySql(MDORM.DapperExt.Mapper.IClassMapper)">
            <summary>
            Identities the SQL.
            </summary>
            <param name="classMap">类映射</param>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.ISqlGenerator.GetTableName(MDORM.DapperExt.Mapper.IClassMapper)">
            <summary>
            获得表名称
            </summary>
            <param name="map">类映射</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.ISqlGenerator.GetColumnName(MDORM.DapperExt.Mapper.IClassMapper,MDORM.DapperExt.Mapper.IPropertyMap,System.Boolean)">
            <summary>
            获取列的名称
            </summary>
            <param name="map">类映射</param>
            <param name="property">属性.</param>
            <param name="includeAlias">if set to <c>true</c> [include alias].</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.ISqlGenerator.GetColumnName(MDORM.DapperExt.Mapper.IClassMapper,System.String,System.Boolean)">
            <summary>
            获取列的名称
            </summary>
            <param name="map">类映射</param>
            <param name="propertyName">属性的名称</param>
            <param name="includeAlias">if set to <c>true</c> [include alias].</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.ISqlGenerator.SupportsMultipleStatements">
            <summary>
            Supportses the multiple statements.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.ISqlGenerator.Update(MDORM.DapperExt.Mapper.IClassMapper,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},MDORM.DapperExt.IPredicate,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            添加的新方法。支持动态更新实体对象
            </summary>
            <param name="classMap">类映射</param>
            <param name="updatedColumns">要更新的列</param>
            <param name="predicate">条件</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="P:MDORM.DapperExt.Sql.ISqlGenerator.Configuration">
            <summary>
            获取配置
            </summary>
            <value>
            配置
            </value>
        </member>
        <member name="T:MDORM.DapperExt.Sql.MySqlDialect">
            <summary>
            MySql
            </summary>
        </member>
        <member name="T:MDORM.DapperExt.Sql.SqlDialectBase">
            <summary>
            基础SQL语言
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlDialectBase.GetTableName(System.String,System.String,System.String)">
            <summary>
            获取表名称
            </summary>
            <param name="schemaName">架构名称</param>
            <param name="tableName">表名称</param>
            <param name="alias">别名</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">TableName;tableName cannot be null or empty.</exception>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlDialectBase.GetColumnName(System.String,System.String,System.String)">
            <summary>
            获取列名称
            </summary>
            <param name="prefix">前缀</param>
            <param name="columnName">列的名称</param>
            <param name="alias">别名</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">ColumnName;columnName cannot be null or empty.</exception>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlDialectBase.GetIdentitySql(System.String)">
            <summary>
            获取主键SQL
            </summary>
            <param name="tableName">表名称</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlDialectBase.GetPagingSql(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取分页SQL
            </summary>
            <param name="sql">SQL</param>
            <param name="page">页索引</param>
            <param name="resultsPerPage">页大小</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlDialectBase.GetSetSql(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取Set SQL
            </summary>
            <param name="sql">SQL</param>
            <param name="firstResult">第一个结果索引</param>
            <param name="maxResults">最大结果索引</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlDialectBase.IsQuoted(System.String)">
            <summary>
            是否是应用
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlDialectBase.QuoteString(System.String)">
            <summary>
            应用字符串
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlDialectBase.UnQuoteString(System.String)">
            <summary>
            Uns the quote string.
            </summary>
            <param name="value">The value.</param>
            <returns>
            </returns>
        </member>
        <member name="P:MDORM.DapperExt.Sql.SqlDialectBase.OpenQuote">
            <summary>
            获取开始引用的字符
            </summary>
            <value>
            The open quote.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.Sql.SqlDialectBase.CloseQuote">
            <summary>
            获取关闭应用的字符
            </summary>
            <value>
            The close quote.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.Sql.SqlDialectBase.BatchSeperator">
            <summary>
            获取批量时的分割字符
            </summary>
            <value>
            The batch seperator.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.Sql.SqlDialectBase.SupportsMultipleStatements">
            <summary>
            获取是否支持复杂声明
            </summary>
            <value>
            <c>true</c> if [supports multiple statements]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.Sql.SqlDialectBase.ParameterPrefix">
            <summary>
            获取参数前缀
            </summary>
            <value>
            The parameter prefix.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.Sql.SqlDialectBase.EmptyExpression">
            <summary>
            获取控的表达式
            </summary>
            <value>
            The empty expression.
            </value>
        </member>
        <member name="M:MDORM.DapperExt.Sql.MySqlDialect.GetIdentitySql(System.String)">
            <summary>
            获取主键SQL
            </summary>
            <param name="tableName">表名称</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.MySqlDialect.GetPagingSql(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取分页SQL
            </summary>
            <param name="sql">SQL</param>
            <param name="page">页索引</param>
            <param name="resultsPerPage">页大小</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.MySqlDialect.GetSetSql(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取Set SQL
            </summary>
            <param name="sql">SQL</param>
            <param name="firstResult">第一个结果索引</param>
            <param name="maxResults">最大结果索引</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="P:MDORM.DapperExt.Sql.MySqlDialect.OpenQuote">
            <summary>
            获取开始引用的字符
            </summary>
            <value>
            The open quote.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.Sql.MySqlDialect.CloseQuote">
            <summary>
            获取关闭应用的字符
            </summary>
            <value>
            The close quote.
            </value>
        </member>
        <member name="T:MDORM.DapperExt.Sql.OracleDialect">
            <summary>
            Oracle
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Sql.OracleDialect.GetIdentitySql(System.String)">
            <summary>
            获取主键SQL
            </summary>
            <param name="tableName">表名称</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.OracleDialect.GetPagingSql(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取分页SQL
            </summary>
            <param name="sql">SQL</param>
            <param name="page">页索引</param>
            <param name="resultsPerPage">页大小</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.OracleDialect.GetSetSql(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取Set SQL
            </summary>
            <param name="sql">SQL</param>
            <param name="firstResult">第一个结果索引</param>
            <param name="maxResults">最大结果索引</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="P:MDORM.DapperExt.Sql.OracleDialect.ParameterPrefix">
            <summary>
            获取参数前缀
            </summary>
            <value>
            The parameter prefix.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.Sql.OracleDialect.OpenQuote">
            <summary>
            获取开始引用的字符
            </summary>
            <value>
            The open quote.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.Sql.OracleDialect.CloseQuote">
            <summary>
            获取关闭应用的字符
            </summary>
            <value>
            The close quote.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.Sql.OracleDialect.SupportsMultipleStatements">
            <summary>
            获取是否支持复杂声明
            </summary>
            <value>
            <c>true</c> if [supports multiple statements]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MDORM.DapperExt.Sql.PostgreSqlDialect">
            <summary>
            PostgreSQL
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Sql.PostgreSqlDialect.GetIdentitySql(System.String)">
            <summary>
            获取主键SQL
            </summary>
            <param name="tableName">表名称</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.PostgreSqlDialect.GetPagingSql(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取分页SQL
            </summary>
            <param name="sql">SQL</param>
            <param name="page">页索引</param>
            <param name="resultsPerPage">页大小</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.PostgreSqlDialect.GetSetSql(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取Set SQL
            </summary>
            <param name="sql">SQL</param>
            <param name="firstResult">第一个结果索引</param>
            <param name="maxResults">最大结果索引</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.PostgreSqlDialect.GetColumnName(System.String,System.String,System.String)">
            <summary>
            获取列名称
            </summary>
            <param name="prefix">前缀</param>
            <param name="columnName">列的名称</param>
            <param name="alias">别名</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.PostgreSqlDialect.GetTableName(System.String,System.String,System.String)">
            <summary>
            获取表名称
            </summary>
            <param name="schemaName">架构名称</param>
            <param name="tableName">表名称</param>
            <param name="alias">别名</param>
            <returns></returns>
        </member>
        <member name="T:MDORM.DapperExt.Sql.SqlCeDialect">
            <summary>
            SqlCe
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlCeDialect.GetTableName(System.String,System.String,System.String)">
            <summary>
            获取表名称
            </summary>
            <param name="schemaName">架构名称</param>
            <param name="tableName">表名称</param>
            <param name="alias">别名</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">TableName</exception>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlCeDialect.GetIdentitySql(System.String)">
            <summary>
            获取主键SQL
            </summary>
            <param name="tableName">表名称</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlCeDialect.GetPagingSql(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取分页SQL
            </summary>
            <param name="sql">SQL</param>
            <param name="page">页索引</param>
            <param name="resultsPerPage">页大小</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlCeDialect.GetSetSql(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取Set SQL
            </summary>
            <param name="sql">SQL</param>
            <param name="firstResult">第一个结果索引</param>
            <param name="maxResults">最大结果索引</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="P:MDORM.DapperExt.Sql.SqlCeDialect.OpenQuote">
            <summary>
            获取开始引用的字符
            </summary>
            <value>
            The open quote.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.Sql.SqlCeDialect.CloseQuote">
            <summary>
            获取关闭应用的字符
            </summary>
            <value>
            The close quote.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.Sql.SqlCeDialect.SupportsMultipleStatements">
            <summary>
            获取是否支持复杂声明
            </summary>
            <value>
            <c>true</c> if [supports multiple statements]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MDORM.DapperExt.Sql.SqlGeneratorImpl">
            <summary>
            具体的SQL生成类
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlGeneratorImpl.#ctor(MDORM.DapperExt.IDapperExtConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:MDORM.DapperExt.Sql.SqlGeneratorImpl"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlGeneratorImpl.Select(MDORM.DapperExt.Mapper.IClassMapper,MDORM.DapperExt.IPredicate,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            生成SELECTSQL语句
            </summary>
            <param name="classMap">类映射</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序列表</param>
            <param name="parameters">参数</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Parameters</exception>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlGeneratorImpl.SelectPaged(MDORM.DapperExt.Mapper.IClassMapper,MDORM.DapperExt.IPredicate,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            生成SelectPagedSQL语句
            </summary>
            <param name="classMap">类映射</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序</param>
            <param name="page">页索引</param>
            <param name="resultsPerPage">页大小</param>
            <param name="parameters">参数</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            Sort;Sort cannot be null or empty.
            or
            Parameters
            </exception>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlGeneratorImpl.SelectSet(MDORM.DapperExt.Mapper.IClassMapper,MDORM.DapperExt.IPredicate,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            生成SelectSet的SQL
            </summary>
            <param name="classMap">类映射</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序条件</param>
            <param name="firstResult">第一个结果索引</param>
            <param name="maxResults">最大结果</param>
            <param name="parameters">参数</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            Sort;Sort cannot be null or empty.
            or
            Parameters
            </exception>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlGeneratorImpl.Count(MDORM.DapperExt.Mapper.IClassMapper,MDORM.DapperExt.IPredicate,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            生成Count的SQL語句
            </summary>
            <param name="classMap">类映射</param>
            <param name="predicate">查询条件</param>
            <param name="parameters">参数</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Parameters</exception>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlGeneratorImpl.Insert(MDORM.DapperExt.Mapper.IClassMapper)">
            <summary>
            Insert方法。不能根据实体动态添加（添加全部列）
            </summary>
            <param name="classMap">类映射</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">No columns were mapped.</exception>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlGeneratorImpl.Update(MDORM.DapperExt.Mapper.IClassMapper,MDORM.DapperExt.IPredicate,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            原始更新方法。不能根据实体动态更新（更新全部列）
            </summary>
            <param name="classMap">类映射</param>
            <param name="predicate">查询条件</param>
            <param name="parameters">参数</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            Predicate
            or
            Parameters
            </exception>
            <exception cref="T:System.ArgumentException">No columns were mapped.</exception>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlGeneratorImpl.Update(MDORM.DapperExt.Mapper.IClassMapper,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},MDORM.DapperExt.IPredicate,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            添加的新方法。支持动态更新实体对象
            </summary>
            <param name="classMap">类映射</param>
            <param name="updatedColumns">要更新的列</param>
            <param name="predicate">条件</param>
            <param name="parameters">参数</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            Predicate
            or
            Parameters
            </exception>
            <exception cref="T:System.ArgumentException">No columns were mapped.</exception>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlGeneratorImpl.Delete(MDORM.DapperExt.Mapper.IClassMapper,MDORM.DapperExt.IPredicate,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Deletes the specified class map.
            </summary>
            <param name="classMap">类映射</param>
            <param name="predicate">查询条件</param>
            <param name="parameters">参数</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            Predicate
            or
            Parameters
            </exception>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlGeneratorImpl.IdentitySql(MDORM.DapperExt.Mapper.IClassMapper)">
            <summary>
            Identities the SQL.
            </summary>
            <param name="classMap">类映射</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlGeneratorImpl.GetTableName(MDORM.DapperExt.Mapper.IClassMapper)">
            <summary>
            获得表名称
            </summary>
            <param name="map">类映射</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlGeneratorImpl.GetColumnName(MDORM.DapperExt.Mapper.IClassMapper,MDORM.DapperExt.Mapper.IPropertyMap,System.Boolean)">
            <summary>
            获取列的名称
            </summary>
            <param name="map">类映射</param>
            <param name="property">属性.</param>
            <param name="includeAlias">if set to <c>true</c> [include alias].</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlGeneratorImpl.GetColumnName(MDORM.DapperExt.Mapper.IClassMapper,System.String,System.Boolean)">
            <summary>
            获取列的名称
            </summary>
            <param name="map">类映射</param>
            <param name="propertyName">属性的名称</param>
            <param name="includeAlias">if set to <c>true</c> [include alias].</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlGeneratorImpl.SupportsMultipleStatements">
            <summary>
            Supportses the multiple statements.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlGeneratorImpl.BuildSelectColumns(MDORM.DapperExt.Mapper.IClassMapper)">
            <summary>
            创建选择的列
            </summary>
            <param name="classMap">类映射</param>
            <returns>
            </returns>
        </member>
        <member name="P:MDORM.DapperExt.Sql.SqlGeneratorImpl.Configuration">
            <summary>
            获取配置
            </summary>
            <value>
            配置
            </value>
        </member>
        <member name="T:MDORM.DapperExt.Sql.SqliteDialect">
            <summary>
            Sqlite语言
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqliteDialect.GetIdentitySql(System.String)">
            <summary>
            获取主键SQL
            </summary>
            <param name="tableName">表名称</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqliteDialect.GetPagingSql(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取分页SQL
            </summary>
            <param name="sql">SQL</param>
            <param name="page">页索引</param>
            <param name="resultsPerPage">页大小</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqliteDialect.GetSetSql(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取Set SQL
            </summary>
            <param name="sql">SQL</param>
            <param name="firstResult">第一个结果索引</param>
            <param name="maxResults">最大结果索引</param>
            <param name="parameters">参数</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            SQL
            or
            Parameters
            </exception>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqliteDialect.GetColumnName(System.String,System.String,System.String)">
            <summary>
            获取列名称
            </summary>
            <param name="prefix">前缀</param>
            <param name="columnName">列的名称</param>
            <param name="alias">别名</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">columnName cannot be null or empty.</exception>
        </member>
        <member name="T:MDORM.DapperExt.Sql.SqlServerDialect">
            <summary>
            SqlServer
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlServerDialect.GetIdentitySql(System.String)">
            <summary>
            获取主键SQL
            </summary>
            <param name="tableName">表名称</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlServerDialect.GetPagingSql(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取分页SQL
            </summary>
            <param name="sql">SQL</param>
            <param name="page">页索引</param>
            <param name="resultsPerPage">页大小</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlServerDialect.GetSetSql(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取Set SQL
            </summary>
            <param name="sql">SQL</param>
            <param name="firstResult">第一个结果索引</param>
            <param name="maxResults">最大结果索引</param>
            <param name="parameters">参数</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            SQL
            or
            Parameters
            </exception>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlServerDialect.GetOrderByClause(System.String)">
            <summary>
            Gets the order by clause.
            </summary>
            <param name="sql">The SQL.</param>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlServerDialect.GetFromStart(System.String)">
            <summary>
            Gets from start.
            </summary>
            <param name="sql">The SQL.</param>
            <returns>
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlServerDialect.GetSelectEnd(System.String)">
            <summary>
            Gets the select end.
            </summary>
            <param name="sql">The SQL.</param>
            <returns>
            </returns>
            <exception cref="T:System.ArgumentException">SQL must be a SELECT statement.;sql</exception>
        </member>
        <member name="M:MDORM.DapperExt.Sql.SqlServerDialect.GetColumnNames(System.String)">
            <summary>
            Gets the column names.
            </summary>
            <param name="sql">The SQL.</param>
            <returns>
            </returns>
        </member>
        <member name="P:MDORM.DapperExt.Sql.SqlServerDialect.OpenQuote">
            <summary>
            获取开始引用的字符
            </summary>
            <value>
            The open quote.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.Sql.SqlServerDialect.CloseQuote">
            <summary>
            获取关闭应用的字符
            </summary>
            <value>
            The close quote.
            </value>
        </member>
        <member name="T:MDORM.DapperExt.Utility.ConfigHelper">
            <summary>
            web.config操作类
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Utility.ConfigHelper.GetConfig(System.String)">
            <summary>
            获取Config配置的值
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
            创建人：朱明明
            创建时间：2014-6-16 9:37
        </member>
        <member name="P:MDORM.DapperExt.Utility.ConfigHelper.WriteLog">
            <summary>
            是否写异常日志，默认false
            </summary>
        </member>
        <member name="T:MDORM.DapperExt.Utility.DBHelper">
            <summary>
            数据库操作帮助类
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Utility.DBHelper.TryOpen(System.Data.IDbConnection)">
            <summary>
            尝试打开链接
            </summary>
            <param name="DbCon">数据库连接</param>
        </member>
        <member name="M:MDORM.DapperExt.Utility.DBHelper.WriteLog(System.Type,System.Exception)">
            <summary>
            写异常日志
            </summary>
            <param name="t">发生异常的源类型</param>
            <param name="ex">异常</param>
        </member>
        <member name="M:MDORM.DapperExt.Utility.DBHelper.Count``1(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据查询条件选择满足条件的记录并返回满足添加的记录条数
            Executes a query using the specified predicate, returning an integer that represents the number of rows that match the query.
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="predicate">查询条件</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>满足条件的记录数</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.DBHelper.Delete``1(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            删除满足通过查询条件的记录
            Executes a delete query using the specified predicate.
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="connection">数据库连接</param>
            <param name="predicate">查询条件</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.DBHelper.ExecuteSql(System.String,System.Object)">
            <summary>
            执行SQL语句，返回受影响的行数
            </summary>
            <param name="sql">需要执行的sql语句</param>
            <param name="param">参数</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.DBHelper.ExecuteSql``1(System.String,System.Object)">
            <summary>
            执行SQL，返回第一行第一个元素的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.DBHelper.ExecuteSql``1(System.String,System.Object,System.Int32@)">
            <summary>
            执行SQL，返回数据实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.DBHelper.ExecuteSP(System.String,System.Object)">
            <summary>
            执行无返回结果集的存储过程  
            </summary>
            <param name="proName"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.DBHelper.ExecuteSP``1(System.String,System.Object,System.Int32@)">
            <summary>
            执行存储过程,并返回结果集
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proName"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="T:MDORM.DapperExt.Utility.DBType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:MDORM.DapperExt.Utility.DBType.SqlServer">
            <summary>
            MSSQLServer
            </summary>
        </member>
        <member name="F:MDORM.DapperExt.Utility.DBType.MySql">
            <summary>
            MySql
            </summary>
        </member>
        <member name="F:MDORM.DapperExt.Utility.DBType.SQLite">
            <summary>
            SQLite
            </summary>
        </member>
        <member name="F:MDORM.DapperExt.Utility.DBType.Oracle">
            <summary>
            Oracle
            </summary>
        </member>
        <member name="F:MDORM.DapperExt.Utility.DBType.SqlCe">
            <summary>
            SqlCe
            </summary>
        </member>
        <member name="T:MDORM.DapperExt.Utility.DESEncrypt">
            <summary>
            DES加密/解密类。
            </summary>
        </member>
        <member name="F:MDORM.DapperExt.Utility.DESEncrypt.defaultKey">
            <summary>
            默认密钥
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Utility.DESEncrypt.Decrypt(System.String)">
            <summary>
            DES（使用默认的密钥）解密方法
            </summary>
            <param name="decryptStr">要解密的字符串</param>
            <returns></returns>
            创建人：朱明明
            创建时间：2011-12-8 16:22
        </member>
        <member name="M:MDORM.DapperExt.Utility.DESEncrypt.Encrypt(System.String)">
            <summary>
            DES(利用默认的密钥)加密方法
            </summary>
            <param name="encryptStr">要加密的字符串</param>
            <returns></returns>
            创建人：朱明明
            创建时间：2011-12-8 16:22
        </member>
        <member name="M:MDORM.DapperExt.Utility.DESEncrypt.Decrypt(System.String,System.String)">
            <summary>
            解密方法
            </summary>
            <param name="pToDecrypt">待解密的字符</param>
            <param name="sKey">密钥</param>
            <returns>
            解密后的字符
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.DESEncrypt.Encrypt(System.String,System.String)">
            <summary>
            加密方法
            </summary>
            <param name="pToEncrypt">待加密字符</param>
            <param name="sKey">密钥</param>
            <returns>
            加密后的字符
            </returns>
        </member>
        <member name="T:MDORM.DapperExt.Utility.IDataRepository`1">
            <summary>
            数据仓库接口
            </summary>
            <typeparam name="T">实体类型</typeparam>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDataRepository`1.GetById(System.Object)">
            <summary>
            通过ID获取单条记录
            </summary>
            <param name="primaryId">动态类型的ID</param>
            <returns>单个实体</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDataRepository`1.GetAll">
            <summary>
            获取全部记录
            </summary>
            <returns>全部记录</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDataRepository`1.Count(System.Object)">
            <summary>
            获取满足条件的记录条数
            </summary>
            <param name="predicate">查找条件</param>
            <returns>满足条件的数据条数</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDataRepository`1.GetList(System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Boolean)">
            <summary>
            获取满足条件的数据列表
            </summary>
            <param name="predicate">查询条件</param>
            <param name="sort">排序列表</param>
            <param name="buffered">是否缓存</param>
            <returns>满足条件的数据列表</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDataRepository`1.GetPage(System.Int32,System.Int32,System.Int32@,System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Boolean)">
            <summary>
            分页获取数据
            </summary>
            <param name="pageIndex">页索引</param>
            <param name="pageSize">页大小</param>
            <param name="allRowsCount">全部记录数</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序</param>
            <param name="buffered">是否缓存</param>
            <returns>当前页数据</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDataRepository`1.Insert(`0)">
            <summary>
            插入一条数据并返回该记录ID
            </summary>
            <param name="entity">数据实体</param>
            <returns>该记录ID</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDataRepository`1.InsertBatch(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            使用事务批量插入
            </summary>
            <param name="entityList">实体列表</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDataRepository`1.Update(`0)">
            <summary>
            更新一条数据
            </summary>
            <param name="entity">一个实体（主键必须有，其他的按需要更新）</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDataRepository`1.UpdateBatch(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            使用事务批量更新
            </summary>
            <param name="entityList">要更新的实体列表</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDataRepository`1.Delete(System.Object)">
            <summary>
            删除满足条件的数据
            </summary>
            <param name="predicate">条件</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDataRepository`1.DeleteList(System.Object)">
            <summary>
            使用事务删除满足条件的数据
            </summary>
            <param name="predicate">条件</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDataRepository`1.DeleteBatch(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            使用事务批量删除
            </summary>
            <param name="ids">ID列表</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:MDORM.DapperExt.Utility.IDataViewRepository`1">
            <summary>
            数据视图仓库接口
            </summary>
            <typeparam name="T">实体类型</typeparam>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDataViewRepository`1.GetAll">
            <summary>
            获取全部记录
            </summary>
            <returns>全部记录</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDataViewRepository`1.Count(System.Object)">
            <summary>
            获取记录条数
            </summary>
            <param name="predicate">查找条件</param>
            <returns>满足条件的数据条数</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDataViewRepository`1.GetList(System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Boolean)">
            <summary>
            获取数据列表
            </summary>
            <param name="predicate">查询条件</param>
            <param name="sort">排序</param>
            <param name="buffered">是否缓存</param>
            <returns>满足条件的数据列表</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDataViewRepository`1.GetPage(System.Int32,System.Int32,System.Int32@,System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Boolean)">
            <summary>
            分页获取数据
            </summary>
            <param name="pageIndex">页索引</param>
            <param name="pageSize">页大小</param>
            <param name="allRowsCount">全部记录数</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序</param>
            <param name="buffered">是否缓存</param>
            <returns>当前页数据</returns>
        </member>
        <member name="T:MDORM.DapperExt.Utility.IDBHelper">
            <summary>
            提供对数据库的基本操作，连接字符串需要在数据库配置。
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDBHelper.GetPagingSql(System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            生成分页SQL语句
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="selectSql"></param>
            <param name="sqlCount"></param>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDBHelper.BeginTractionand">
            <summary>
            开始一个事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDBHelper.BeginTractionand(System.String)">
            <summary>
            开始一个事务
            </summary>
            <param name="connKey">数据库连接字符key</param>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDBHelper.RollbackTractionand(System.Data.Common.DbTransaction)">
            <summary>
            回滚事务
            </summary>
            <param name="dbTransaction">要回滚的事务</param>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDBHelper.CommitTractionand(System.Data.Common.DbTransaction)">
            <summary>
            结束并确认事务
            </summary>
            <param name="dbTransaction">要结束的事务</param>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDBHelper.ExecuteDataSet(System.String,System.Data.CommandType)">
            <summary>
            执行sql语句,ExecuteDataSet 返回DataSet
            </summary>
            <param name="commandText">sql语句</param>
            <param name="commandType"></param>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDBHelper.ExecuteDataSet(System.String,System.String,System.Data.CommandType)">
            <summary>
            执行sql语句,ExecuteDataSet 返回DataSet
            </summary>
            <param name="connKey">数据库连接字符key</param>
            <param name="commandText">sql语句</param>
            <param name="commandType"></param>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDBHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            执行sql语句,ExecuteDataSet 返回DataSet
            </summary>
            <param name="commandText">sql语句</param>
            <param name="commandType"></param>
            <param name="parameterValues">参数</param>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDBHelper.ExecuteDataSet(System.String,System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            执行sql语句,ExecuteDataSet 返回DataSet
            </summary>
            <param name="connKey">数据库连接字符key</param>
            <param name="commandText">sql语句</param>
            <param name="commandType"></param>
            <param name="parameterValues">参数</param>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDBHelper.ExecuteNonQuery(System.String,System.Data.CommandType)">
            <summary>
            执行sql语句,返回影响的行数
            </summary>
            <param name="commandText">sql语句</param>
            <param name="commandType"></param>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDBHelper.ExecuteNonQuery(System.String,System.String,System.Data.CommandType)">
            <summary>
            执行sql语句,返回影响的行数
            </summary>
            <param name="connKey">数据库连接字符key</param>
            <param name="commandText">sql语句</param>
            <param name="commandType"></param>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDBHelper.ExecuteNonQuery(System.Data.Common.DbTransaction,System.String,System.Data.CommandType)">
            <summary>
            执行sql语句,返回影响的行数
            </summary>
            <param name="trans">事务对象</param>
            <param name="commandText">sql语句</param>
            <param name="commandType"></param>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDBHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            执行sql语句,返回影响的行数
            </summary>
            <param name="commandText">sql语句</param>
            <param name="commandType"></param>
            <param name="parameterValues">参数</param>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDBHelper.ExecuteNonQuery(System.String,System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            执行sql语句,返回影响的行数
            </summary>
            <param name="connKey">数据库连接字符key</param>
            <param name="commandText">sql语句</param>
            <param name="commandType"></param>
            <param name="parameterValues">参数</param>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDBHelper.ExecuteNonQuery(System.Data.Common.DbTransaction,System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            执行sql语句,返回影响的行数
            </summary>
            <param name="trans">事务对象</param>
            <param name="commandText">sql语句</param>
            <param name="commandType"></param>
            <param name="parameterValues">参数</param>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDBHelper.ExecuteReader(System.String,System.Data.CommandType)">
            <summary>
            执行sql语句,ExecuteReader 返回IDataReader
            </summary>   
            <param name="commandText">sql语句</param>
            <param name="commandType"></param>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDBHelper.ExecuteReader(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            执行sql语句,ExecuteReader 返回IDataReader
            </summary> 
            <param name="commandText">sql语句</param>
            <param name="commandType"></param>
            <param name="parameterValues">参数</param>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDBHelper.ExecuteReader(System.String,System.String,System.Data.CommandType)">
            <summary>
            执行sql语句,ExecuteReader 返回IDataReader
            </summary>
            <param name="connKey">数据库连接字符key</param>        
            <param name="commandText">sql语句</param>
            <param name="commandType"></param>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDBHelper.ExecuteReader(System.String,System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            执行sql语句,ExecuteReader 返回IDataReader
            </summary>
            <param name="connKey">数据库连接字符key</param>        
            <param name="commandText">sql语句</param>
            <param name="commandType"></param>
            <param name="parameterValues">参数</param>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDBHelper.ExecuteScalar(System.String,System.Data.CommandType)">
            <summary>
            执行sql语句,ExecuteScalar 返回第一行第一列的值
            </summary>
            <param name="commandText">sql语句</param>
            <param name="commandType"></param>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDBHelper.ExecuteScalar(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            执行sql语句,ExecuteScalar 返回第一行第一列的值
            </summary>
            <param name="commandText">sql语句</param>
            <param name="commandType"></param>
            <param name="parameterValues">参数</param>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDBHelper.ExecuteScalar(System.Data.Common.DbTransaction,System.String,System.Data.CommandType)">
            <summary>
            执行sql语句,ExecuteScalar 返回第一行第一列的值
            </summary>
            <param name="trans">事务</param>
            <param name="commandText">sql语句</param>
            <param name="commandType"></param>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDBHelper.ExecuteScalar(System.String,System.String,System.Data.CommandType)">
            <summary>
            执行sql语句,ExecuteScalar 返回第一行第一列的值
            </summary>
            <param name="connKey">数据库连接字符key</param>
            <param name="commandText">sql语句</param>
            <param name="commandType"></param>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDBHelper.ExecuteScalar(System.String,System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            执行sql语句,ExecuteScalar 返回第一行第一列的值
            </summary>
            <param name="connKey">数据库连接字符key</param>
            <param name="commandText">sql语句</param>
            <param name="commandType"></param>
            <param name="parameterValues">参数</param>
        </member>
        <member name="M:MDORM.DapperExt.Utility.IDBHelper.ExecuteScalar(System.Data.Common.DbTransaction,System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            执行sql语句,ExecuteScalar 返回第一行第一列的值
            </summary>
            <param name="trans">事务</param>
            <param name="commandText">sql语句</param>
            <param name="commandType"></param>
            <param name="parameterValues">参数</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.LogHelper.WriteLog(System.Type,System.Exception)">
            <summary>
            以错误的形式输出异常日志到Log4Net
            </summary>
            <param name="t"></param>
            <param name="ex"></param>
        </member>
        <member name="M:MDORM.DapperExt.Utility.LogHelper.WriteLog(System.String)">
            <summary>
            以INFO的形式输出日常日志到Log4Net
            </summary>
            <param name="info">内容</param>
        </member>
        <member name="T:MDORM.DapperExt.Utility.PageArgs">
            <summary>
            分页参数类
            </summary>
            创建人：朱明明
            创建时间：2014-4-9 10:16:11
        </member>
        <member name="P:MDORM.DapperExt.Utility.PageArgs.PageIndex">
            <summary>
            获取或设置当前页索引,第一页索引为 1
            </summary>
            <value>
            The index of the page.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.Utility.PageArgs.PageSize">
            <summary>
            获取或设置页大小
            </summary>
            <value>
            The size of the page.
            </value>
        </member>
        <member name="P:MDORM.DapperExt.Utility.PageArgs.TotalRecord">
            <summary>
            获取总记录数
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.Utility.PageArgs.PageCount">
            <summary>
            获取记录总页数
            </summary>
        </member>
        <member name="T:MDORM.DapperExt.Utility.PubConstant">
            <summary>
            公共常量
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Utility.PubConstant.GetCustomConStr(System.String)">
            <summary>
            得到config里配置项的数据库连接字符串。
            </summary>
            <param name="configName">配置名称</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.PubConstant.GetConfig(System.String)">
            <summary>
            获取Config配置的值
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
            创建人：朱明明
            创建时间：2014-6-16 9:37
        </member>
        <member name="P:MDORM.DapperExt.Utility.PubConstant.DbType">
            <summary>
            获取数据库类型
            </summary>
        </member>
        <member name="P:MDORM.DapperExt.Utility.PubConstant.ConnectionString">
            <summary>
            获取默认连接字符串
            </summary>
        </member>
        <member name="T:MDORM.DapperExt.Utility.RepositoryBase`1">
            <summary>
            数据仓库实现基类
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Utility.RepositoryBase`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Utility.RepositoryBase`1.GetById(System.Object)">
            <summary>
            通过ID获取单条记录
            </summary>
            <param name="primaryId">动态类型的ID</param>
            <returns>单个实体</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.RepositoryBase`1.GetAll">
            <summary>
            获取全部记录
            </summary>
            <returns>全部记录</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.RepositoryBase`1.Count(System.Object)">
            <summary>
            获取满足条件的记录条数
            </summary>
            <param name="predicate">查找条件</param>
            <returns>满足条件的数据条数</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.RepositoryBase`1.GetList(System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Boolean)">
            <summary>
            获取满足条件的数据列表
            </summary>
            <param name="predicate">查询条件</param>
            <param name="sort">排序列表</param>
            <param name="buffered">是否缓存</param>
            <returns>满足条件的数据列表</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.RepositoryBase`1.GetPage(System.Int32,System.Int32,System.Int32@,System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Boolean)">
            <summary>
            分页获取数据
            </summary>
            <param name="pageIndex">页索引页索引（从0开始）</param>
            <param name="pageSize">页大小</param>
            <param name="allRowsCount">全部记录数</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序</param>
            <param name="buffered">是否缓存</param>
            <returns>当前页数据</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.RepositoryBase`1.Insert(`0)">
            <summary>
            插入一条数据并返回该记录ID
            </summary>
            <param name="entity">数据实体</param>
            <returns>该记录ID</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.RepositoryBase`1.InsertBatch(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            使用事务批量插入
            </summary>
            <param name="entityList">实体列表</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.RepositoryBase`1.Update(`0)">
            <summary>
            更新一条数据
            </summary>
            <param name="entity">一个实体（主键必须有，其他的按需要更新）</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.RepositoryBase`1.UpdateBatch(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            使用事务批量更新
            </summary>
            <param name="entityList">要更新的实体列表</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.RepositoryBase`1.Delete(System.Object)">
            <summary>
            删除满足条件的数据
            </summary>
            <param name="predicate">条件</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.RepositoryBase`1.DeleteList(System.Object)">
            <summary>
            使用事务删除满足条件的数据
            </summary>
            <param name="predicate">条件</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.RepositoryBase`1.DeleteBatch(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            使用事务批量删除
            </summary>
            <param name="ids">ID列表</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:MDORM.DapperExt.Utility.SqlConnectionFactory">
            <summary>
            数据库连接工厂
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Utility.SqlConnectionFactory.CreateSqlConnection">
            <summary>
            根据配置创建数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.SqlConnectionFactory.CreateSqlCon">
            <summary>
            工厂模式 根据配置创建数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.SqlDialectFactory.CreateDialect">
            <summary>
            根据配置创建数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.SqlDialectFactory.CreateSqlDialect">
            <summary>
            工厂模式 根据配置创建数据库
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.SqlHelper.GetConnection(System.String)">
            <summary>
            Get Sql Connection
            </summary>
            <param name="connectionString">connection string</param>
            <returns>Database Connection</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.SqlHelper.Exists(System.String,System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            是否存在该记录
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="strSql">SQL语句</param>
            <param name="cmdType">CommandType枚举</param>
            <param name="cmdParms">SQL参数</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.SqlHelper.GetSingle(System.String,System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略其他列或行。
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="SQLString">计算查询结果语句</param>
            <param name="cmdType">CommandType类型</param>
            <param name="cmdParms">SQL参数</param>
            <returns>
            查询结果（object）
            </returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行插入,修改,删除操作语句
            </summary>
            <param name="connectionString"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlCommand,System.Boolean)">
            <summary>
            ExecuteNonQuery
            </summary>
            <param name="cmd">SqlCommand</param>
            <param name="keep">open connection</param>
            <returns>int</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.SqlHelper.ExecuteNonQueryTrans(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlCommand,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            事务处理
            </summary>
            <param name="conn"></param>
            <param name="cmd"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:MDORM.DapperExt.Utility.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            返回SqlDataReader
            </summary>
            <param name="connectionString"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.SqlHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            返回DataSet
            </summary>
            <param name="connectionString"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.SqlHelper.ExecuteDataTable(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            返回DataTable
            </summary>
            <param name="connectionString"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.SqlHelper.ExecuteDataSet_NoTimeLimit(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            返回DataSet
            </summary>
            <param name="connectionString"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            返回第一行第一列数据:洪拾金
            </summary>
            <param name="connectionString"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.SqlHelper.ExecuteScalarWithTransaction(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlCommand,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            返回第一行第一列数据:洪拾金
            </summary>
            <param name="connectionString"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.SqlHelper.ExecuteDataTable(System.Int32@,System.Int32,System.Int32,System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            返回DataTable的分页
            </summary>
            <param name="pageCount">共有多少页</param>
            <param name="pageSize">每页显示的记录条数</param>
            <param name="pagePrve">当前显示第几页</param>
            <param name="connectionString"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            预处理Command
            </summary>
            <param name="cmd">要处理的Command对象</param>
            <param name="conn">连接字符串</param>
            <param name="trans">数据库事务对象</param>
            <param name="cmdType">CommandType枚举</param>
            <param name="cmdText">SQL语句</param>
            <param name="cmdParms">SQL参数列表</param>
        </member>
        <member name="T:MDORM.DapperExt.Utility.ViewRepositoryBase`1">
            <summary>
            数据视图仓库实现基类
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Utility.ViewRepositoryBase`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:MDORM.DapperExt.Utility.ViewRepositoryBase`1.GetAll">
            <summary>
            获取全部数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.ViewRepositoryBase`1.Count(System.Object)">
            <summary>
            满足条件的数据条数
            </summary>
            <param name="predicate">查询条件</param>
            <returns>满足条件的记录数</returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.ViewRepositoryBase`1.GetList(System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Boolean)">
            <summary>
            获取满足条件的记录
            </summary>
            <param name="predicate">查询条件</param>
            <param name="sort">排序</param>
            <param name="buffered">是否缓存</param>
            <returns></returns>
        </member>
        <member name="M:MDORM.DapperExt.Utility.ViewRepositoryBase`1.GetPage(System.Int32,System.Int32,System.Int32@,System.Object,System.Collections.Generic.IList{MDORM.DapperExt.ISort},System.Boolean)">
            <summary>
            分页获取
            </summary>
            <param name="pageIndex">页索引页索引（从0开始）</param>
            <param name="pageSize">页大小</param>
            <param name="allRowsCount">全部记录数</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序</param>
            <param name="buffered">是否缓存</param>
            <returns></returns>
        </member>
    </members>
</doc>
